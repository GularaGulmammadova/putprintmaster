"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getCacheUploadsAfterChangeHook: function() {
        return getCacheUploadsAfterChangeHook;
    },
    getCacheUploadsAfterDeleteHook: function() {
        return getCacheUploadsAfterDeleteHook;
    }
});
const getCacheUploadsAfterChangeHook = ({ endpoint })=>async ({ doc, operation, req })=>{
        if (!req || !process.env.PAYLOAD_CLOUD_CACHE_KEY) return doc;
        const { res } = req;
        if (res) {
            if (operation === 'update') {
                // Unawaited promise
                purge({
                    doc,
                    endpoint,
                    operation,
                    req
                });
            }
        }
        return doc;
    };
const getCacheUploadsAfterDeleteHook = ({ endpoint })=>async ({ doc, req })=>{
        if (!req || !process.env.PAYLOAD_CLOUD_CACHE_KEY) return doc;
        const { res } = req;
        if (res) {
            // Unawaited promise
            purge({
                doc,
                endpoint,
                operation: 'delete',
                req
            });
        }
        return doc;
    };
async function purge({ doc, endpoint, operation, req }) {
    const filePath = doc.url;
    if (!filePath) {
        req.payload.logger.error({
            msg: 'No url found on doc',
            project: {
                id: process.env.PAYLOAD_CLOUD_PROJECT_ID
            }
        });
        return;
    }
    const filepaths = [
        filePath
    ];
    try {
        if (doc.sizes && Object.keys(doc.sizes).length) {
            const urls = Object.values(doc.sizes).map((size)=>size?.url).filter(Boolean);
            filepaths.push(...urls);
        }
        const body = {
            cacheKey: process.env.PAYLOAD_CLOUD_CACHE_KEY,
            filepaths,
            projectID: process.env.PAYLOAD_CLOUD_PROJECT_ID
        };
        req.payload.logger.debug({
            filepaths,
            msg: 'Purging cache for filepaths',
            operation,
            project: {
                id: process.env.PAYLOAD_CLOUD_PROJECT_ID
            }
        });
        const purgeRes = await fetch(`${endpoint}/api/purge-cache`, {
            body: JSON.stringify({
                ...body
            }),
            headers: {
                'Content-Type': 'application/json'
            },
            method: 'POST'
        });
        req.payload.logger.debug({
            msg: 'Purge cache result',
            operation,
            statusCode: purgeRes.status
        });
    } catch (err) {
        req.payload.logger.error({
            data: {
                id: doc.id,
                filepaths
            },
            err,
            msg: '/purge-cache call failed'
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91cGxvYWRDYWNoZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIENvbGxlY3Rpb25BZnRlckNoYW5nZUhvb2ssXG4gIENvbGxlY3Rpb25BZnRlckRlbGV0ZUhvb2ssXG4gIFBheWxvYWRSZXF1ZXN0LFxufSBmcm9tICdwYXlsb2FkL3R5cGVzJ1xuXG5pbnRlcmZhY2UgQXJncyB7XG4gIGVuZHBvaW50OiBzdHJpbmdcbn1cblxudHlwZSBHZW5lcmljVXBsb2FkID0ge1xuICBpZDogc3RyaW5nXG4gIHNpemVzPzogUmVjb3JkPHN0cmluZywgeyB1cmw/OiBzdHJpbmcgfT5cbiAgdXJsPzogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBnZXRDYWNoZVVwbG9hZHNBZnRlckNoYW5nZUhvb2sgPVxuICAoeyBlbmRwb2ludCB9OiBBcmdzKTogQ29sbGVjdGlvbkFmdGVyQ2hhbmdlSG9vazxHZW5lcmljVXBsb2FkPiA9PlxuICBhc3luYyAoeyBkb2MsIG9wZXJhdGlvbiwgcmVxIH0pID0+IHtcbiAgICBpZiAoIXJlcSB8fCAhcHJvY2Vzcy5lbnYuUEFZTE9BRF9DTE9VRF9DQUNIRV9LRVkpIHJldHVybiBkb2NcblxuICAgIGNvbnN0IHsgcmVzIH0gPSByZXFcbiAgICBpZiAocmVzKSB7XG4gICAgICBpZiAob3BlcmF0aW9uID09PSAndXBkYXRlJykge1xuICAgICAgICAvLyBVbmF3YWl0ZWQgcHJvbWlzZVxuICAgICAgICBwdXJnZSh7IGRvYywgZW5kcG9pbnQsIG9wZXJhdGlvbiwgcmVxIH0pXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkb2NcbiAgfVxuXG5leHBvcnQgY29uc3QgZ2V0Q2FjaGVVcGxvYWRzQWZ0ZXJEZWxldGVIb29rID1cbiAgKHsgZW5kcG9pbnQgfTogQXJncyk6IENvbGxlY3Rpb25BZnRlckRlbGV0ZUhvb2sgPT5cbiAgYXN5bmMgKHsgZG9jLCByZXEgfSkgPT4ge1xuICAgIGlmICghcmVxIHx8ICFwcm9jZXNzLmVudi5QQVlMT0FEX0NMT1VEX0NBQ0hFX0tFWSkgcmV0dXJuIGRvY1xuXG4gICAgY29uc3QgeyByZXMgfSA9IHJlcVxuICAgIGlmIChyZXMpIHtcbiAgICAgIC8vIFVuYXdhaXRlZCBwcm9taXNlXG4gICAgICBwdXJnZSh7IGRvYywgZW5kcG9pbnQsIG9wZXJhdGlvbjogJ2RlbGV0ZScsIHJlcSB9KVxuICAgIH1cbiAgICByZXR1cm4gZG9jXG4gIH1cblxudHlwZSBQdXJnZVJlcXVlc3QgPSB7XG4gIGRvYzogR2VuZXJpY1VwbG9hZFxuICBlbmRwb2ludDogc3RyaW5nXG4gIG9wZXJhdGlvbjogc3RyaW5nXG4gIHJlcTogUGF5bG9hZFJlcXVlc3Rcbn1cblxuYXN5bmMgZnVuY3Rpb24gcHVyZ2UoeyBkb2MsIGVuZHBvaW50LCBvcGVyYXRpb24sIHJlcSB9OiBQdXJnZVJlcXVlc3QpIHtcbiAgY29uc3QgZmlsZVBhdGggPSBkb2MudXJsXG5cbiAgaWYgKCFmaWxlUGF0aCkge1xuICAgIHJlcS5wYXlsb2FkLmxvZ2dlci5lcnJvcih7XG4gICAgICBtc2c6ICdObyB1cmwgZm91bmQgb24gZG9jJyxcbiAgICAgIHByb2plY3Q6IHtcbiAgICAgICAgaWQ6IHByb2Nlc3MuZW52LlBBWUxPQURfQ0xPVURfUFJPSkVDVF9JRCxcbiAgICAgIH0sXG4gICAgfSlcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IGZpbGVwYXRocyA9IFtmaWxlUGF0aF1cbiAgdHJ5IHtcbiAgICBpZiAoZG9jLnNpemVzICYmIE9iamVjdC5rZXlzKGRvYy5zaXplcykubGVuZ3RoKSB7XG4gICAgICBjb25zdCB1cmxzID0gT2JqZWN0LnZhbHVlcyhkb2Muc2l6ZXMpXG4gICAgICAgIC5tYXAoKHNpemUpID0+IHNpemU/LnVybClcbiAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgZmlsZXBhdGhzLnB1c2goLi4udXJscylcbiAgICB9XG5cbiAgICBjb25zdCBib2R5ID0ge1xuICAgICAgY2FjaGVLZXk6IHByb2Nlc3MuZW52LlBBWUxPQURfQ0xPVURfQ0FDSEVfS0VZLFxuICAgICAgZmlsZXBhdGhzLFxuICAgICAgcHJvamVjdElEOiBwcm9jZXNzLmVudi5QQVlMT0FEX0NMT1VEX1BST0pFQ1RfSUQsXG4gICAgfVxuXG4gICAgcmVxLnBheWxvYWQubG9nZ2VyLmRlYnVnKHtcbiAgICAgIGZpbGVwYXRocyxcbiAgICAgIG1zZzogJ1B1cmdpbmcgY2FjaGUgZm9yIGZpbGVwYXRocycsXG4gICAgICBvcGVyYXRpb24sXG4gICAgICBwcm9qZWN0OiB7XG4gICAgICAgIGlkOiBwcm9jZXNzLmVudi5QQVlMT0FEX0NMT1VEX1BST0pFQ1RfSUQsXG4gICAgICB9LFxuICAgIH0pXG5cbiAgICBjb25zdCBwdXJnZVJlcyA9IGF3YWl0IGZldGNoKGAke2VuZHBvaW50fS9hcGkvcHVyZ2UtY2FjaGVgLCB7XG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIC4uLmJvZHksXG4gICAgICB9KSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0sXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICB9KVxuXG4gICAgcmVxLnBheWxvYWQubG9nZ2VyLmRlYnVnKHtcbiAgICAgIG1zZzogJ1B1cmdlIGNhY2hlIHJlc3VsdCcsXG4gICAgICBvcGVyYXRpb24sXG4gICAgICBzdGF0dXNDb2RlOiBwdXJnZVJlcy5zdGF0dXMsXG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyOiB1bmtub3duKSB7XG4gICAgcmVxLnBheWxvYWQubG9nZ2VyLmVycm9yKHtcbiAgICAgIGRhdGE6IHsgaWQ6IGRvYy5pZCwgZmlsZXBhdGhzIH0sXG4gICAgICBlcnIsXG4gICAgICBtc2c6ICcvcHVyZ2UtY2FjaGUgY2FsbCBmYWlsZWQnLFxuICAgIH0pXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJnZXRDYWNoZVVwbG9hZHNBZnRlckNoYW5nZUhvb2siLCJnZXRDYWNoZVVwbG9hZHNBZnRlckRlbGV0ZUhvb2siLCJlbmRwb2ludCIsImRvYyIsIm9wZXJhdGlvbiIsInJlcSIsInByb2Nlc3MiLCJlbnYiLCJQQVlMT0FEX0NMT1VEX0NBQ0hFX0tFWSIsInJlcyIsInB1cmdlIiwiZmlsZVBhdGgiLCJ1cmwiLCJwYXlsb2FkIiwibG9nZ2VyIiwiZXJyb3IiLCJtc2ciLCJwcm9qZWN0IiwiaWQiLCJQQVlMT0FEX0NMT1VEX1BST0pFQ1RfSUQiLCJmaWxlcGF0aHMiLCJzaXplcyIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJ1cmxzIiwidmFsdWVzIiwibWFwIiwic2l6ZSIsImZpbHRlciIsIkJvb2xlYW4iLCJwdXNoIiwiYm9keSIsImNhY2hlS2V5IiwicHJvamVjdElEIiwiZGVidWciLCJwdXJnZVJlcyIsImZldGNoIiwiSlNPTiIsInN0cmluZ2lmeSIsImhlYWRlcnMiLCJtZXRob2QiLCJzdGF0dXNDb2RlIiwic3RhdHVzIiwiZXJyIiwiZGF0YSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFnQmFBLDhCQUE4QjtlQUE5QkE7O0lBZUFDLDhCQUE4QjtlQUE5QkE7OztBQWZOLE1BQU1ELGlDQUNYLENBQUMsRUFBRUUsUUFBUSxFQUFRLEdBQ25CLE9BQU8sRUFBRUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLEdBQUcsRUFBRTtRQUM1QixJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsUUFBUUMsR0FBRyxDQUFDQyx1QkFBdUIsRUFBRSxPQUFPTDtRQUV6RCxNQUFNLEVBQUVNLEdBQUcsRUFBRSxHQUFHSjtRQUNoQixJQUFJSSxLQUFLO1lBQ1AsSUFBSUwsY0FBYyxVQUFVO2dCQUMxQixvQkFBb0I7Z0JBQ3BCTSxNQUFNO29CQUFFUDtvQkFBS0Q7b0JBQVVFO29CQUFXQztnQkFBSTtZQUN4QztRQUNGO1FBQ0EsT0FBT0Y7SUFDVDtBQUVLLE1BQU1GLGlDQUNYLENBQUMsRUFBRUMsUUFBUSxFQUFRLEdBQ25CLE9BQU8sRUFBRUMsR0FBRyxFQUFFRSxHQUFHLEVBQUU7UUFDakIsSUFBSSxDQUFDQSxPQUFPLENBQUNDLFFBQVFDLEdBQUcsQ0FBQ0MsdUJBQXVCLEVBQUUsT0FBT0w7UUFFekQsTUFBTSxFQUFFTSxHQUFHLEVBQUUsR0FBR0o7UUFDaEIsSUFBSUksS0FBSztZQUNQLG9CQUFvQjtZQUNwQkMsTUFBTTtnQkFBRVA7Z0JBQUtEO2dCQUFVRSxXQUFXO2dCQUFVQztZQUFJO1FBQ2xEO1FBQ0EsT0FBT0Y7SUFDVDtBQVNGLGVBQWVPLE1BQU0sRUFBRVAsR0FBRyxFQUFFRCxRQUFRLEVBQUVFLFNBQVMsRUFBRUMsR0FBRyxFQUFnQjtJQUNsRSxNQUFNTSxXQUFXUixJQUFJUyxHQUFHO0lBRXhCLElBQUksQ0FBQ0QsVUFBVTtRQUNiTixJQUFJUSxPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDO1lBQ3ZCQyxLQUFLO1lBQ0xDLFNBQVM7Z0JBQ1BDLElBQUlaLFFBQVFDLEdBQUcsQ0FBQ1ksd0JBQXdCO1lBQzFDO1FBQ0Y7UUFDQTtJQUNGO0lBRUEsTUFBTUMsWUFBWTtRQUFDVDtLQUFTO0lBQzVCLElBQUk7UUFDRixJQUFJUixJQUFJa0IsS0FBSyxJQUFJQyxPQUFPQyxJQUFJLENBQUNwQixJQUFJa0IsS0FBSyxFQUFFRyxNQUFNLEVBQUU7WUFDOUMsTUFBTUMsT0FBT0gsT0FBT0ksTUFBTSxDQUFDdkIsSUFBSWtCLEtBQUssRUFDakNNLEdBQUcsQ0FBQyxDQUFDQyxPQUFTQSxNQUFNaEIsS0FDcEJpQixNQUFNLENBQUNDO1lBQ1ZWLFVBQVVXLElBQUksSUFBSU47UUFDcEI7UUFFQSxNQUFNTyxPQUFPO1lBQ1hDLFVBQVUzQixRQUFRQyxHQUFHLENBQUNDLHVCQUF1QjtZQUM3Q1k7WUFDQWMsV0FBVzVCLFFBQVFDLEdBQUcsQ0FBQ1ksd0JBQXdCO1FBQ2pEO1FBRUFkLElBQUlRLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDcUIsS0FBSyxDQUFDO1lBQ3ZCZjtZQUNBSixLQUFLO1lBQ0xaO1lBQ0FhLFNBQVM7Z0JBQ1BDLElBQUlaLFFBQVFDLEdBQUcsQ0FBQ1ksd0JBQXdCO1lBQzFDO1FBQ0Y7UUFFQSxNQUFNaUIsV0FBVyxNQUFNQyxNQUFNLENBQUMsRUFBRW5DLFNBQVMsZ0JBQWdCLENBQUMsRUFBRTtZQUMxRDhCLE1BQU1NLEtBQUtDLFNBQVMsQ0FBQztnQkFDbkIsR0FBR1AsSUFBSTtZQUNUO1lBQ0FRLFNBQVM7Z0JBQ1AsZ0JBQWdCO1lBQ2xCO1lBQ0FDLFFBQVE7UUFDVjtRQUVBcEMsSUFBSVEsT0FBTyxDQUFDQyxNQUFNLENBQUNxQixLQUFLLENBQUM7WUFDdkJuQixLQUFLO1lBQ0xaO1lBQ0FzQyxZQUFZTixTQUFTTyxNQUFNO1FBQzdCO0lBQ0YsRUFBRSxPQUFPQyxLQUFjO1FBQ3JCdkMsSUFBSVEsT0FBTyxDQUFDQyxNQUFNLENBQUNDLEtBQUssQ0FBQztZQUN2QjhCLE1BQU07Z0JBQUUzQixJQUFJZixJQUFJZSxFQUFFO2dCQUFFRTtZQUFVO1lBQzlCd0I7WUFDQTVCLEtBQUs7UUFDUDtJQUNGO0FBQ0YifQ==