"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "payloadCloudEmail", {
    enumerable: true,
    get: function() {
        return payloadCloudEmail;
    }
});
const _nodemailer = /*#__PURE__*/ _interop_require_default(require("nodemailer"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const payloadCloudEmail = (args)=>{
    if (process.env.PAYLOAD_CLOUD !== 'true' || !args) {
        return undefined;
    }
    if (!args.apiKey) throw new Error('apiKey must be provided to use Payload Cloud Email ');
    if (!args.defaultDomain) throw new Error('defaultDomain must be provided to use Payload Cloud Email');
    const { apiKey, config, defaultDomain } = args;
    const customDomainEnvs = Object.keys(process.env).filter((e)=>e.startsWith('PAYLOAD_CLOUD_EMAIL_DOMAIN_') && !e.endsWith('API_KEY'));
    const customDomains = customDomainEnvs.map((e)=>process.env[e]).filter(Boolean);
    if (customDomains.length) {
        console.log(`Configuring Payload Cloud Email for ${[
            defaultDomain,
            ...customDomains || []
        ].join(', ')}`);
    }
    const fromName = config.email?.fromName || 'Payload CMS';
    const fromAddress = config.email?.fromAddress || `cms@${customDomains.length ? customDomains[0] : defaultDomain}`;
    const existingTransport = config.email && 'transport' in config.email && config.email?.transport;
    if (existingTransport) {
        return {
            fromAddress,
            fromName,
            transport: existingTransport
        };
    }
    return {
        fromAddress,
        fromName,
        transport: _nodemailer.default.createTransport({
            auth: {
                pass: apiKey,
                user: 'resend'
            },
            host: 'smtp.resend.com',
            port: 465,
            secure: true
        })
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbWFpbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEVtYWlsVHJhbnNwb3J0IH0gZnJvbSAncGF5bG9hZC9jb25maWcnXG5cbmltcG9ydCBub2RlbWFpbGVyIGZyb20gJ25vZGVtYWlsZXInXG5cbmltcG9ydCB0eXBlIHsgUGF5bG9hZENsb3VkRW1haWxPcHRpb25zIH0gZnJvbSAnLi90eXBlcydcblxuZXhwb3J0IGNvbnN0IHBheWxvYWRDbG91ZEVtYWlsID0gKGFyZ3M6IFBheWxvYWRDbG91ZEVtYWlsT3B0aW9ucyk6IEVtYWlsVHJhbnNwb3J0IHwgdW5kZWZpbmVkID0+IHtcbiAgaWYgKHByb2Nlc3MuZW52LlBBWUxPQURfQ0xPVUQgIT09ICd0cnVlJyB8fCAhYXJncykge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIGlmICghYXJncy5hcGlLZXkpIHRocm93IG5ldyBFcnJvcignYXBpS2V5IG11c3QgYmUgcHJvdmlkZWQgdG8gdXNlIFBheWxvYWQgQ2xvdWQgRW1haWwgJylcbiAgaWYgKCFhcmdzLmRlZmF1bHREb21haW4pXG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWZhdWx0RG9tYWluIG11c3QgYmUgcHJvdmlkZWQgdG8gdXNlIFBheWxvYWQgQ2xvdWQgRW1haWwnKVxuXG4gIGNvbnN0IHsgYXBpS2V5LCBjb25maWcsIGRlZmF1bHREb21haW4gfSA9IGFyZ3NcblxuICBjb25zdCBjdXN0b21Eb21haW5FbnZzID0gT2JqZWN0LmtleXMocHJvY2Vzcy5lbnYpLmZpbHRlcihcbiAgICAoZSkgPT4gZS5zdGFydHNXaXRoKCdQQVlMT0FEX0NMT1VEX0VNQUlMX0RPTUFJTl8nKSAmJiAhZS5lbmRzV2l0aCgnQVBJX0tFWScpLFxuICApXG5cbiAgY29uc3QgY3VzdG9tRG9tYWlucyA9IGN1c3RvbURvbWFpbkVudnMubWFwKChlKSA9PiBwcm9jZXNzLmVudltlXSkuZmlsdGVyKEJvb2xlYW4pXG5cbiAgaWYgKGN1c3RvbURvbWFpbnMubGVuZ3RoKSB7XG4gICAgY29uc29sZS5sb2coXG4gICAgICBgQ29uZmlndXJpbmcgUGF5bG9hZCBDbG91ZCBFbWFpbCBmb3IgJHtbZGVmYXVsdERvbWFpbiwgLi4uKGN1c3RvbURvbWFpbnMgfHwgW10pXS5qb2luKCcsICcpfWAsXG4gICAgKVxuICB9XG5cbiAgY29uc3QgZnJvbU5hbWUgPSBjb25maWcuZW1haWw/LmZyb21OYW1lIHx8ICdQYXlsb2FkIENNUydcbiAgY29uc3QgZnJvbUFkZHJlc3MgPVxuICAgIGNvbmZpZy5lbWFpbD8uZnJvbUFkZHJlc3MgfHwgYGNtc0Ake2N1c3RvbURvbWFpbnMubGVuZ3RoID8gY3VzdG9tRG9tYWluc1swXSA6IGRlZmF1bHREb21haW59YFxuXG4gIGNvbnN0IGV4aXN0aW5nVHJhbnNwb3J0ID0gY29uZmlnLmVtYWlsICYmICd0cmFuc3BvcnQnIGluIGNvbmZpZy5lbWFpbCAmJiBjb25maWcuZW1haWw/LnRyYW5zcG9ydFxuXG4gIGlmIChleGlzdGluZ1RyYW5zcG9ydCkge1xuICAgIHJldHVybiB7XG4gICAgICBmcm9tQWRkcmVzcyxcbiAgICAgIGZyb21OYW1lLFxuICAgICAgdHJhbnNwb3J0OiBleGlzdGluZ1RyYW5zcG9ydCxcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZyb21BZGRyZXNzLFxuICAgIGZyb21OYW1lLFxuICAgIHRyYW5zcG9ydDogbm9kZW1haWxlci5jcmVhdGVUcmFuc3BvcnQoe1xuICAgICAgYXV0aDoge1xuICAgICAgICBwYXNzOiBhcGlLZXksXG4gICAgICAgIHVzZXI6ICdyZXNlbmQnLFxuICAgICAgfSxcbiAgICAgIGhvc3Q6ICdzbXRwLnJlc2VuZC5jb20nLFxuICAgICAgcG9ydDogNDY1LFxuICAgICAgc2VjdXJlOiB0cnVlLFxuICAgIH0pLFxuICB9XG59XG4iXSwibmFtZXMiOlsicGF5bG9hZENsb3VkRW1haWwiLCJhcmdzIiwicHJvY2VzcyIsImVudiIsIlBBWUxPQURfQ0xPVUQiLCJ1bmRlZmluZWQiLCJhcGlLZXkiLCJFcnJvciIsImRlZmF1bHREb21haW4iLCJjb25maWciLCJjdXN0b21Eb21haW5FbnZzIiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsImUiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJjdXN0b21Eb21haW5zIiwibWFwIiwiQm9vbGVhbiIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciLCJqb2luIiwiZnJvbU5hbWUiLCJlbWFpbCIsImZyb21BZGRyZXNzIiwiZXhpc3RpbmdUcmFuc3BvcnQiLCJ0cmFuc3BvcnQiLCJub2RlbWFpbGVyIiwiY3JlYXRlVHJhbnNwb3J0IiwiYXV0aCIsInBhc3MiLCJ1c2VyIiwiaG9zdCIsInBvcnQiLCJzZWN1cmUiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQU1hQTs7O2VBQUFBOzs7bUVBSlU7Ozs7OztBQUloQixNQUFNQSxvQkFBb0IsQ0FBQ0M7SUFDaEMsSUFBSUMsUUFBUUMsR0FBRyxDQUFDQyxhQUFhLEtBQUssVUFBVSxDQUFDSCxNQUFNO1FBQ2pELE9BQU9JO0lBQ1Q7SUFFQSxJQUFJLENBQUNKLEtBQUtLLE1BQU0sRUFBRSxNQUFNLElBQUlDLE1BQU07SUFDbEMsSUFBSSxDQUFDTixLQUFLTyxhQUFhLEVBQ3JCLE1BQU0sSUFBSUQsTUFBTTtJQUVsQixNQUFNLEVBQUVELE1BQU0sRUFBRUcsTUFBTSxFQUFFRCxhQUFhLEVBQUUsR0FBR1A7SUFFMUMsTUFBTVMsbUJBQW1CQyxPQUFPQyxJQUFJLENBQUNWLFFBQVFDLEdBQUcsRUFBRVUsTUFBTSxDQUN0RCxDQUFDQyxJQUFNQSxFQUFFQyxVQUFVLENBQUMsa0NBQWtDLENBQUNELEVBQUVFLFFBQVEsQ0FBQztJQUdwRSxNQUFNQyxnQkFBZ0JQLGlCQUFpQlEsR0FBRyxDQUFDLENBQUNKLElBQU1aLFFBQVFDLEdBQUcsQ0FBQ1csRUFBRSxFQUFFRCxNQUFNLENBQUNNO0lBRXpFLElBQUlGLGNBQWNHLE1BQU0sRUFBRTtRQUN4QkMsUUFBUUMsR0FBRyxDQUNULENBQUMsb0NBQW9DLEVBQUU7WUFBQ2Q7ZUFBbUJTLGlCQUFpQixFQUFFO1NBQUUsQ0FBQ00sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUVqRztJQUVBLE1BQU1DLFdBQVdmLE9BQU9nQixLQUFLLEVBQUVELFlBQVk7SUFDM0MsTUFBTUUsY0FDSmpCLE9BQU9nQixLQUFLLEVBQUVDLGVBQWUsQ0FBQyxJQUFJLEVBQUVULGNBQWNHLE1BQU0sR0FBR0gsYUFBYSxDQUFDLEVBQUUsR0FBR1QsY0FBYyxDQUFDO0lBRS9GLE1BQU1tQixvQkFBb0JsQixPQUFPZ0IsS0FBSyxJQUFJLGVBQWVoQixPQUFPZ0IsS0FBSyxJQUFJaEIsT0FBT2dCLEtBQUssRUFBRUc7SUFFdkYsSUFBSUQsbUJBQW1CO1FBQ3JCLE9BQU87WUFDTEQ7WUFDQUY7WUFDQUksV0FBV0Q7UUFDYjtJQUNGO0lBRUEsT0FBTztRQUNMRDtRQUNBRjtRQUNBSSxXQUFXQyxtQkFBVSxDQUFDQyxlQUFlLENBQUM7WUFDcENDLE1BQU07Z0JBQ0pDLE1BQU0xQjtnQkFDTjJCLE1BQU07WUFDUjtZQUNBQyxNQUFNO1lBQ05DLE1BQU07WUFDTkMsUUFBUTtRQUNWO0lBQ0Y7QUFDRiJ9