"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getLocalizedSortProperty", {
    enumerable: true,
    get: function() {
        return getLocalizedSortProperty;
    }
});
const _types = require("payload/types");
const _utilities = require("payload/utilities");
const getLocalizedSortProperty = ({ config, fields: incomingFields, locale, result: incomingResult, segments: incomingSegments })=>{
    // If localization is not enabled, accept exactly
    // what is sent in
    if (!config.localization) {
        return incomingSegments.join('.');
    }
    // Flatten incoming fields (row, etc)
    const fields = (0, _utilities.flattenTopLevelFields)(incomingFields);
    const segments = [
        ...incomingSegments
    ];
    // Retrieve first segment, and remove from segments
    const firstSegment = segments.shift();
    // Attempt to find a matched field
    const matchedField = fields.find((field)=>(0, _types.fieldAffectsData)(field) && field.name === firstSegment);
    if (matchedField && !(0, _types.fieldIsPresentationalOnly)(matchedField)) {
        let nextFields;
        const remainingSegments = [
            ...segments
        ];
        let localizedSegment = matchedField.name;
        if (matchedField.localized) {
            // Check to see if next segment is a locale
            if (segments.length > 0) {
                const nextSegmentIsLocale = config.localization.localeCodes.includes(remainingSegments[0]);
                // If next segment is locale, remove it from remaining segments
                // and use it to localize the current segment
                if (nextSegmentIsLocale) {
                    const nextSegment = remainingSegments.shift();
                    localizedSegment = `${matchedField.name}.${nextSegment}`;
                }
            } else {
                // If no more segments, but field is localized, use default locale
                localizedSegment = `${matchedField.name}.${locale}`;
            }
        }
        // If there are subfields, pass them through
        if (matchedField.type === 'tab' || matchedField.type === 'group' || matchedField.type === 'array') {
            nextFields = matchedField.fields;
        }
        if (matchedField.type === 'blocks') {
            nextFields = matchedField.blocks.reduce((flattenedBlockFields, block)=>{
                return [
                    ...flattenedBlockFields,
                    ...block.fields.filter((blockField)=>(0, _types.fieldAffectsData)(blockField) && blockField.name !== 'blockType' && blockField.name !== 'blockName' || !(0, _types.fieldAffectsData)(blockField))
                ];
            }, []);
        }
        const result = incomingResult ? `${incomingResult}.${localizedSegment}` : localizedSegment;
        if (nextFields) {
            return getLocalizedSortProperty({
                config,
                fields: nextFields,
                locale,
                result,
                segments: remainingSegments
            });
        }
        return result;
    }
    return incomingSegments.join('.');
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyaWVzL2dldExvY2FsaXplZFNvcnRQcm9wZXJ0eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFNhbml0aXplZENvbmZpZyB9IGZyb20gJ3BheWxvYWQvY29uZmlnJ1xuaW1wb3J0IHR5cGUgeyBGaWVsZCB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCB7IGZpZWxkQWZmZWN0c0RhdGEsIGZpZWxkSXNQcmVzZW50YXRpb25hbE9ubHkgfSBmcm9tICdwYXlsb2FkL3R5cGVzJ1xuaW1wb3J0IHsgZmxhdHRlblRvcExldmVsRmllbGRzIH0gZnJvbSAncGF5bG9hZC91dGlsaXRpZXMnXG5cbnR5cGUgQXJncyA9IHtcbiAgY29uZmlnOiBTYW5pdGl6ZWRDb25maWdcbiAgZmllbGRzOiBGaWVsZFtdXG4gIGxvY2FsZTogc3RyaW5nXG4gIHJlc3VsdD86IHN0cmluZ1xuICBzZWdtZW50czogc3RyaW5nW11cbn1cblxuZXhwb3J0IGNvbnN0IGdldExvY2FsaXplZFNvcnRQcm9wZXJ0eSA9ICh7XG4gIGNvbmZpZyxcbiAgZmllbGRzOiBpbmNvbWluZ0ZpZWxkcyxcbiAgbG9jYWxlLFxuICByZXN1bHQ6IGluY29taW5nUmVzdWx0LFxuICBzZWdtZW50czogaW5jb21pbmdTZWdtZW50cyxcbn06IEFyZ3MpOiBzdHJpbmcgPT4ge1xuICAvLyBJZiBsb2NhbGl6YXRpb24gaXMgbm90IGVuYWJsZWQsIGFjY2VwdCBleGFjdGx5XG4gIC8vIHdoYXQgaXMgc2VudCBpblxuICBpZiAoIWNvbmZpZy5sb2NhbGl6YXRpb24pIHtcbiAgICByZXR1cm4gaW5jb21pbmdTZWdtZW50cy5qb2luKCcuJylcbiAgfVxuXG4gIC8vIEZsYXR0ZW4gaW5jb21pbmcgZmllbGRzIChyb3csIGV0YylcbiAgY29uc3QgZmllbGRzID0gZmxhdHRlblRvcExldmVsRmllbGRzKGluY29taW5nRmllbGRzKVxuXG4gIGNvbnN0IHNlZ21lbnRzID0gWy4uLmluY29taW5nU2VnbWVudHNdXG5cbiAgLy8gUmV0cmlldmUgZmlyc3Qgc2VnbWVudCwgYW5kIHJlbW92ZSBmcm9tIHNlZ21lbnRzXG4gIGNvbnN0IGZpcnN0U2VnbWVudCA9IHNlZ21lbnRzLnNoaWZ0KClcblxuICAvLyBBdHRlbXB0IHRvIGZpbmQgYSBtYXRjaGVkIGZpZWxkXG4gIGNvbnN0IG1hdGNoZWRGaWVsZCA9IGZpZWxkcy5maW5kKFxuICAgIChmaWVsZCkgPT4gZmllbGRBZmZlY3RzRGF0YShmaWVsZCkgJiYgZmllbGQubmFtZSA9PT0gZmlyc3RTZWdtZW50LFxuICApXG5cbiAgaWYgKG1hdGNoZWRGaWVsZCAmJiAhZmllbGRJc1ByZXNlbnRhdGlvbmFsT25seShtYXRjaGVkRmllbGQpKSB7XG4gICAgbGV0IG5leHRGaWVsZHM6IEZpZWxkW11cbiAgICBjb25zdCByZW1haW5pbmdTZWdtZW50cyA9IFsuLi5zZWdtZW50c11cbiAgICBsZXQgbG9jYWxpemVkU2VnbWVudCA9IG1hdGNoZWRGaWVsZC5uYW1lXG5cbiAgICBpZiAobWF0Y2hlZEZpZWxkLmxvY2FsaXplZCkge1xuICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIG5leHQgc2VnbWVudCBpcyBhIGxvY2FsZVxuICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgbmV4dFNlZ21lbnRJc0xvY2FsZSA9IGNvbmZpZy5sb2NhbGl6YXRpb24ubG9jYWxlQ29kZXMuaW5jbHVkZXMocmVtYWluaW5nU2VnbWVudHNbMF0pXG5cbiAgICAgICAgLy8gSWYgbmV4dCBzZWdtZW50IGlzIGxvY2FsZSwgcmVtb3ZlIGl0IGZyb20gcmVtYWluaW5nIHNlZ21lbnRzXG4gICAgICAgIC8vIGFuZCB1c2UgaXQgdG8gbG9jYWxpemUgdGhlIGN1cnJlbnQgc2VnbWVudFxuICAgICAgICBpZiAobmV4dFNlZ21lbnRJc0xvY2FsZSkge1xuICAgICAgICAgIGNvbnN0IG5leHRTZWdtZW50ID0gcmVtYWluaW5nU2VnbWVudHMuc2hpZnQoKVxuICAgICAgICAgIGxvY2FsaXplZFNlZ21lbnQgPSBgJHttYXRjaGVkRmllbGQubmFtZX0uJHtuZXh0U2VnbWVudH1gXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIG5vIG1vcmUgc2VnbWVudHMsIGJ1dCBmaWVsZCBpcyBsb2NhbGl6ZWQsIHVzZSBkZWZhdWx0IGxvY2FsZVxuICAgICAgICBsb2NhbGl6ZWRTZWdtZW50ID0gYCR7bWF0Y2hlZEZpZWxkLm5hbWV9LiR7bG9jYWxlfWBcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSBhcmUgc3ViZmllbGRzLCBwYXNzIHRoZW0gdGhyb3VnaFxuICAgIGlmIChcbiAgICAgIG1hdGNoZWRGaWVsZC50eXBlID09PSAndGFiJyB8fFxuICAgICAgbWF0Y2hlZEZpZWxkLnR5cGUgPT09ICdncm91cCcgfHxcbiAgICAgIG1hdGNoZWRGaWVsZC50eXBlID09PSAnYXJyYXknXG4gICAgKSB7XG4gICAgICBuZXh0RmllbGRzID0gbWF0Y2hlZEZpZWxkLmZpZWxkc1xuICAgIH1cblxuICAgIGlmIChtYXRjaGVkRmllbGQudHlwZSA9PT0gJ2Jsb2NrcycpIHtcbiAgICAgIG5leHRGaWVsZHMgPSBtYXRjaGVkRmllbGQuYmxvY2tzLnJlZHVjZSgoZmxhdHRlbmVkQmxvY2tGaWVsZHMsIGJsb2NrKSA9PiB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgLi4uZmxhdHRlbmVkQmxvY2tGaWVsZHMsXG4gICAgICAgICAgLi4uYmxvY2suZmllbGRzLmZpbHRlcihcbiAgICAgICAgICAgIChibG9ja0ZpZWxkKSA9PlxuICAgICAgICAgICAgICAoZmllbGRBZmZlY3RzRGF0YShibG9ja0ZpZWxkKSAmJlxuICAgICAgICAgICAgICAgIGJsb2NrRmllbGQubmFtZSAhPT0gJ2Jsb2NrVHlwZScgJiZcbiAgICAgICAgICAgICAgICBibG9ja0ZpZWxkLm5hbWUgIT09ICdibG9ja05hbWUnKSB8fFxuICAgICAgICAgICAgICAhZmllbGRBZmZlY3RzRGF0YShibG9ja0ZpZWxkKSxcbiAgICAgICAgICApLFxuICAgICAgICBdXG4gICAgICB9LCBbXSlcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBpbmNvbWluZ1Jlc3VsdCA/IGAke2luY29taW5nUmVzdWx0fS4ke2xvY2FsaXplZFNlZ21lbnR9YCA6IGxvY2FsaXplZFNlZ21lbnRcblxuICAgIGlmIChuZXh0RmllbGRzKSB7XG4gICAgICByZXR1cm4gZ2V0TG9jYWxpemVkU29ydFByb3BlcnR5KHtcbiAgICAgICAgY29uZmlnLFxuICAgICAgICBmaWVsZHM6IG5leHRGaWVsZHMsXG4gICAgICAgIGxvY2FsZSxcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBzZWdtZW50czogcmVtYWluaW5nU2VnbWVudHMsXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIHJldHVybiBpbmNvbWluZ1NlZ21lbnRzLmpvaW4oJy4nKVxufVxuIl0sIm5hbWVzIjpbImdldExvY2FsaXplZFNvcnRQcm9wZXJ0eSIsImNvbmZpZyIsImZpZWxkcyIsImluY29taW5nRmllbGRzIiwibG9jYWxlIiwicmVzdWx0IiwiaW5jb21pbmdSZXN1bHQiLCJzZWdtZW50cyIsImluY29taW5nU2VnbWVudHMiLCJsb2NhbGl6YXRpb24iLCJqb2luIiwiZmxhdHRlblRvcExldmVsRmllbGRzIiwiZmlyc3RTZWdtZW50Iiwic2hpZnQiLCJtYXRjaGVkRmllbGQiLCJmaW5kIiwiZmllbGQiLCJmaWVsZEFmZmVjdHNEYXRhIiwibmFtZSIsImZpZWxkSXNQcmVzZW50YXRpb25hbE9ubHkiLCJuZXh0RmllbGRzIiwicmVtYWluaW5nU2VnbWVudHMiLCJsb2NhbGl6ZWRTZWdtZW50IiwibG9jYWxpemVkIiwibGVuZ3RoIiwibmV4dFNlZ21lbnRJc0xvY2FsZSIsImxvY2FsZUNvZGVzIiwiaW5jbHVkZXMiLCJuZXh0U2VnbWVudCIsInR5cGUiLCJibG9ja3MiLCJyZWR1Y2UiLCJmbGF0dGVuZWRCbG9ja0ZpZWxkcyIsImJsb2NrIiwiZmlsdGVyIiwiYmxvY2tGaWVsZCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQWNhQTs7O2VBQUFBOzs7dUJBWCtDOzJCQUN0QjtBQVUvQixNQUFNQSwyQkFBMkIsQ0FBQyxFQUN2Q0MsTUFBTSxFQUNOQyxRQUFRQyxjQUFjLEVBQ3RCQyxNQUFNLEVBQ05DLFFBQVFDLGNBQWMsRUFDdEJDLFVBQVVDLGdCQUFnQixFQUNyQjtJQUNMLGlEQUFpRDtJQUNqRCxrQkFBa0I7SUFDbEIsSUFBSSxDQUFDUCxPQUFPUSxZQUFZLEVBQUU7UUFDeEIsT0FBT0QsaUJBQWlCRSxJQUFJLENBQUM7SUFDL0I7SUFFQSxxQ0FBcUM7SUFDckMsTUFBTVIsU0FBU1MsSUFBQUEsZ0NBQXFCLEVBQUNSO0lBRXJDLE1BQU1JLFdBQVc7V0FBSUM7S0FBaUI7SUFFdEMsbURBQW1EO0lBQ25ELE1BQU1JLGVBQWVMLFNBQVNNLEtBQUs7SUFFbkMsa0NBQWtDO0lBQ2xDLE1BQU1DLGVBQWVaLE9BQU9hLElBQUksQ0FDOUIsQ0FBQ0MsUUFBVUMsSUFBQUEsdUJBQWdCLEVBQUNELFVBQVVBLE1BQU1FLElBQUksS0FBS047SUFHdkQsSUFBSUUsZ0JBQWdCLENBQUNLLElBQUFBLGdDQUF5QixFQUFDTCxlQUFlO1FBQzVELElBQUlNO1FBQ0osTUFBTUMsb0JBQW9CO2VBQUlkO1NBQVM7UUFDdkMsSUFBSWUsbUJBQW1CUixhQUFhSSxJQUFJO1FBRXhDLElBQUlKLGFBQWFTLFNBQVMsRUFBRTtZQUMxQiwyQ0FBMkM7WUFDM0MsSUFBSWhCLFNBQVNpQixNQUFNLEdBQUcsR0FBRztnQkFDdkIsTUFBTUMsc0JBQXNCeEIsT0FBT1EsWUFBWSxDQUFDaUIsV0FBVyxDQUFDQyxRQUFRLENBQUNOLGlCQUFpQixDQUFDLEVBQUU7Z0JBRXpGLCtEQUErRDtnQkFDL0QsNkNBQTZDO2dCQUM3QyxJQUFJSSxxQkFBcUI7b0JBQ3ZCLE1BQU1HLGNBQWNQLGtCQUFrQlIsS0FBSztvQkFDM0NTLG1CQUFtQixDQUFDLEVBQUVSLGFBQWFJLElBQUksQ0FBQyxDQUFDLEVBQUVVLFlBQVksQ0FBQztnQkFDMUQ7WUFDRixPQUFPO2dCQUNMLGtFQUFrRTtnQkFDbEVOLG1CQUFtQixDQUFDLEVBQUVSLGFBQWFJLElBQUksQ0FBQyxDQUFDLEVBQUVkLE9BQU8sQ0FBQztZQUNyRDtRQUNGO1FBRUEsNENBQTRDO1FBQzVDLElBQ0VVLGFBQWFlLElBQUksS0FBSyxTQUN0QmYsYUFBYWUsSUFBSSxLQUFLLFdBQ3RCZixhQUFhZSxJQUFJLEtBQUssU0FDdEI7WUFDQVQsYUFBYU4sYUFBYVosTUFBTTtRQUNsQztRQUVBLElBQUlZLGFBQWFlLElBQUksS0FBSyxVQUFVO1lBQ2xDVCxhQUFhTixhQUFhZ0IsTUFBTSxDQUFDQyxNQUFNLENBQUMsQ0FBQ0Msc0JBQXNCQztnQkFDN0QsT0FBTzt1QkFDRkQ7dUJBQ0FDLE1BQU0vQixNQUFNLENBQUNnQyxNQUFNLENBQ3BCLENBQUNDLGFBQ0MsQUFBQ2xCLElBQUFBLHVCQUFnQixFQUFDa0IsZUFDaEJBLFdBQVdqQixJQUFJLEtBQUssZUFDcEJpQixXQUFXakIsSUFBSSxLQUFLLGVBQ3RCLENBQUNELElBQUFBLHVCQUFnQixFQUFDa0I7aUJBRXZCO1lBQ0gsR0FBRyxFQUFFO1FBQ1A7UUFFQSxNQUFNOUIsU0FBU0MsaUJBQWlCLENBQUMsRUFBRUEsZUFBZSxDQUFDLEVBQUVnQixpQkFBaUIsQ0FBQyxHQUFHQTtRQUUxRSxJQUFJRixZQUFZO1lBQ2QsT0FBT3BCLHlCQUF5QjtnQkFDOUJDO2dCQUNBQyxRQUFRa0I7Z0JBQ1JoQjtnQkFDQUM7Z0JBQ0FFLFVBQVVjO1lBQ1o7UUFDRjtRQUVBLE9BQU9oQjtJQUNUO0lBRUEsT0FBT0csaUJBQWlCRSxJQUFJLENBQUM7QUFDL0IifQ==