"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _config = require("payload/config");
const _getLocalizedSortProperty = require("./getLocalizedSortProperty");
const config = {
    localization: {
        locales: [
            'en',
            'es'
        ]
    }
};
describe('get localized sort property', ()=>{
    it('passes through a non-localized sort property', ()=>{
        const result = (0, _getLocalizedSortProperty.getLocalizedSortProperty)({
            segments: [
                'title'
            ],
            config: (0, _config.sanitizeConfig)(config),
            fields: [
                {
                    name: 'title',
                    type: 'text'
                }
            ],
            locale: 'en'
        });
        expect(result).toStrictEqual('title');
    });
    it('properly localizes an un-localized sort property', ()=>{
        const result = (0, _getLocalizedSortProperty.getLocalizedSortProperty)({
            segments: [
                'title'
            ],
            config: (0, _config.sanitizeConfig)(config),
            fields: [
                {
                    name: 'title',
                    type: 'text',
                    localized: true
                }
            ],
            locale: 'en'
        });
        expect(result).toStrictEqual('title.en');
    });
    it('keeps specifically asked-for localized sort properties', ()=>{
        const result = (0, _getLocalizedSortProperty.getLocalizedSortProperty)({
            segments: [
                'title',
                'es'
            ],
            config: (0, _config.sanitizeConfig)(config),
            fields: [
                {
                    name: 'title',
                    type: 'text',
                    localized: true
                }
            ],
            locale: 'en'
        });
        expect(result).toStrictEqual('title.es');
    });
    it('properly localizes nested sort properties', ()=>{
        const result = (0, _getLocalizedSortProperty.getLocalizedSortProperty)({
            segments: [
                'group',
                'title'
            ],
            config: (0, _config.sanitizeConfig)(config),
            fields: [
                {
                    name: 'group',
                    type: 'group',
                    fields: [
                        {
                            name: 'title',
                            type: 'text',
                            localized: true
                        }
                    ]
                }
            ],
            locale: 'en'
        });
        expect(result).toStrictEqual('group.title.en');
    });
    it('keeps requested locale with nested sort properties', ()=>{
        const result = (0, _getLocalizedSortProperty.getLocalizedSortProperty)({
            segments: [
                'group',
                'title',
                'es'
            ],
            config: (0, _config.sanitizeConfig)(config),
            fields: [
                {
                    name: 'group',
                    type: 'group',
                    fields: [
                        {
                            name: 'title',
                            type: 'text',
                            localized: true
                        }
                    ]
                }
            ],
            locale: 'en'
        });
        expect(result).toStrictEqual('group.title.es');
    });
    it('properly localizes field within row', ()=>{
        const result = (0, _getLocalizedSortProperty.getLocalizedSortProperty)({
            segments: [
                'title'
            ],
            config: (0, _config.sanitizeConfig)(config),
            fields: [
                {
                    type: 'row',
                    fields: [
                        {
                            name: 'title',
                            type: 'text',
                            localized: true
                        }
                    ]
                }
            ],
            locale: 'en'
        });
        expect(result).toStrictEqual('title.en');
    });
    it('properly localizes field within named tab', ()=>{
        const result = (0, _getLocalizedSortProperty.getLocalizedSortProperty)({
            segments: [
                'tab',
                'title'
            ],
            config: (0, _config.sanitizeConfig)(config),
            fields: [
                {
                    type: 'tabs',
                    tabs: [
                        {
                            name: 'tab',
                            fields: [
                                {
                                    name: 'title',
                                    type: 'text',
                                    localized: true
                                }
                            ]
                        }
                    ]
                }
            ],
            locale: 'en'
        });
        expect(result).toStrictEqual('tab.title.en');
    });
    it('properly localizes field within unnamed tab', ()=>{
        const result = (0, _getLocalizedSortProperty.getLocalizedSortProperty)({
            segments: [
                'title'
            ],
            config: (0, _config.sanitizeConfig)(config),
            fields: [
                {
                    type: 'tabs',
                    tabs: [
                        {
                            label: 'Tab',
                            fields: [
                                {
                                    name: 'title',
                                    type: 'text',
                                    localized: true
                                }
                            ]
                        }
                    ]
                }
            ],
            locale: 'en'
        });
        expect(result).toStrictEqual('title.en');
    });
});

//# sourceMappingURL=data:application/json;base64,