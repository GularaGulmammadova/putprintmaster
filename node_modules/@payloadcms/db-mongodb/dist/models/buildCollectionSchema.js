"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _mongoosepaginatev2 = /*#__PURE__*/ _interop_require_default(require("mongoose-paginate-v2"));
const _buildQuery = /*#__PURE__*/ _interop_require_default(require("../queries/buildQuery"));
const _buildSchema = /*#__PURE__*/ _interop_require_default(require("./buildSchema"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const buildCollectionSchema = (collection, adapter)=>{
    const schema = (0, _buildSchema.default)(adapter, collection.fields, {
        draftsEnabled: Boolean(typeof collection?.versions === 'object' && collection.versions.drafts),
        indexSortableFields: adapter.payload.config.indexSortableFields,
        options: {
            minimize: false,
            timestamps: collection.timestamps !== false,
            ...adapter.schemaOptions,
            ...adapter.collectionOptions[collection.slug]?.schemaOptions || {}
        }
    });
    if (adapter.payload.config.indexSortableFields && collection.timestamps !== false) {
        schema.index({
            updatedAt: 1
        });
        schema.index({
            createdAt: 1
        });
    }
    schema.plugin(_mongoosepaginatev2.default, {
        useEstimatedCount: true
    }).plugin((0, _buildQuery.default)({
        collectionSlug: collection.slug
    }));
    return schema;
};
const _default = buildCollectionSchema;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvYnVpbGRDb2xsZWN0aW9uU2NoZW1hLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUGFnaW5hdGVPcHRpb25zLCBTY2hlbWEgfSBmcm9tICdtb25nb29zZSdcbmltcG9ydCB0eXBlIHsgU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZyB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCBwYWdpbmF0ZSBmcm9tICdtb25nb29zZS1wYWdpbmF0ZS12MidcblxuaW1wb3J0IHR5cGUgeyBNb25nb29zZUFkYXB0ZXIgfSBmcm9tICcuLidcblxuaW1wb3J0IGdldEJ1aWxkUXVlcnlQbHVnaW4gZnJvbSAnLi4vcXVlcmllcy9idWlsZFF1ZXJ5J1xuaW1wb3J0IGJ1aWxkU2NoZW1hIGZyb20gJy4vYnVpbGRTY2hlbWEnXG5cbmNvbnN0IGJ1aWxkQ29sbGVjdGlvblNjaGVtYSA9IChcbiAgY29sbGVjdGlvbjogU2FuaXRpemVkQ29sbGVjdGlvbkNvbmZpZyxcbiAgYWRhcHRlcjogTW9uZ29vc2VBZGFwdGVyLFxuKTogU2NoZW1hID0+IHtcbiAgY29uc3Qgc2NoZW1hID0gYnVpbGRTY2hlbWEoYWRhcHRlciwgY29sbGVjdGlvbi5maWVsZHMsIHtcbiAgICBkcmFmdHNFbmFibGVkOiBCb29sZWFuKHR5cGVvZiBjb2xsZWN0aW9uPy52ZXJzaW9ucyA9PT0gJ29iamVjdCcgJiYgY29sbGVjdGlvbi52ZXJzaW9ucy5kcmFmdHMpLFxuICAgIGluZGV4U29ydGFibGVGaWVsZHM6IGFkYXB0ZXIucGF5bG9hZC5jb25maWcuaW5kZXhTb3J0YWJsZUZpZWxkcyxcbiAgICBvcHRpb25zOiB7XG4gICAgICBtaW5pbWl6ZTogZmFsc2UsXG4gICAgICB0aW1lc3RhbXBzOiBjb2xsZWN0aW9uLnRpbWVzdGFtcHMgIT09IGZhbHNlLFxuICAgICAgLi4uYWRhcHRlci5zY2hlbWFPcHRpb25zLFxuICAgICAgLi4uKGFkYXB0ZXIuY29sbGVjdGlvbk9wdGlvbnNbY29sbGVjdGlvbi5zbHVnXT8uc2NoZW1hT3B0aW9ucyB8fCB7fSksXG4gICAgfSxcbiAgfSlcblxuICBpZiAoYWRhcHRlci5wYXlsb2FkLmNvbmZpZy5pbmRleFNvcnRhYmxlRmllbGRzICYmIGNvbGxlY3Rpb24udGltZXN0YW1wcyAhPT0gZmFsc2UpIHtcbiAgICBzY2hlbWEuaW5kZXgoeyB1cGRhdGVkQXQ6IDEgfSlcbiAgICBzY2hlbWEuaW5kZXgoeyBjcmVhdGVkQXQ6IDEgfSlcbiAgfVxuXG4gIHNjaGVtYVxuICAgIC5wbHVnaW48YW55LCBQYWdpbmF0ZU9wdGlvbnM+KHBhZ2luYXRlLCB7IHVzZUVzdGltYXRlZENvdW50OiB0cnVlIH0pXG4gICAgLnBsdWdpbihnZXRCdWlsZFF1ZXJ5UGx1Z2luKHsgY29sbGVjdGlvblNsdWc6IGNvbGxlY3Rpb24uc2x1ZyB9KSlcblxuICByZXR1cm4gc2NoZW1hXG59XG5cbmV4cG9ydCBkZWZhdWx0IGJ1aWxkQ29sbGVjdGlvblNjaGVtYVxuIl0sIm5hbWVzIjpbImJ1aWxkQ29sbGVjdGlvblNjaGVtYSIsImNvbGxlY3Rpb24iLCJhZGFwdGVyIiwic2NoZW1hIiwiYnVpbGRTY2hlbWEiLCJmaWVsZHMiLCJkcmFmdHNFbmFibGVkIiwiQm9vbGVhbiIsInZlcnNpb25zIiwiZHJhZnRzIiwiaW5kZXhTb3J0YWJsZUZpZWxkcyIsInBheWxvYWQiLCJjb25maWciLCJvcHRpb25zIiwibWluaW1pemUiLCJ0aW1lc3RhbXBzIiwic2NoZW1hT3B0aW9ucyIsImNvbGxlY3Rpb25PcHRpb25zIiwic2x1ZyIsImluZGV4IiwidXBkYXRlZEF0IiwiY3JlYXRlZEF0IiwicGx1Z2luIiwicGFnaW5hdGUiLCJ1c2VFc3RpbWF0ZWRDb3VudCIsImdldEJ1aWxkUXVlcnlQbHVnaW4iLCJjb2xsZWN0aW9uU2x1ZyJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFxQ0E7OztlQUFBOzs7MkVBbENxQjttRUFJVztvRUFDUjs7Ozs7O0FBRXhCLE1BQU1BLHdCQUF3QixDQUM1QkMsWUFDQUM7SUFFQSxNQUFNQyxTQUFTQyxJQUFBQSxvQkFBVyxFQUFDRixTQUFTRCxXQUFXSSxNQUFNLEVBQUU7UUFDckRDLGVBQWVDLFFBQVEsT0FBT04sWUFBWU8sYUFBYSxZQUFZUCxXQUFXTyxRQUFRLENBQUNDLE1BQU07UUFDN0ZDLHFCQUFxQlIsUUFBUVMsT0FBTyxDQUFDQyxNQUFNLENBQUNGLG1CQUFtQjtRQUMvREcsU0FBUztZQUNQQyxVQUFVO1lBQ1ZDLFlBQVlkLFdBQVdjLFVBQVUsS0FBSztZQUN0QyxHQUFHYixRQUFRYyxhQUFhO1lBQ3hCLEdBQUlkLFFBQVFlLGlCQUFpQixDQUFDaEIsV0FBV2lCLElBQUksQ0FBQyxFQUFFRixpQkFBaUIsQ0FBQyxDQUFDO1FBQ3JFO0lBQ0Y7SUFFQSxJQUFJZCxRQUFRUyxPQUFPLENBQUNDLE1BQU0sQ0FBQ0YsbUJBQW1CLElBQUlULFdBQVdjLFVBQVUsS0FBSyxPQUFPO1FBQ2pGWixPQUFPZ0IsS0FBSyxDQUFDO1lBQUVDLFdBQVc7UUFBRTtRQUM1QmpCLE9BQU9nQixLQUFLLENBQUM7WUFBRUUsV0FBVztRQUFFO0lBQzlCO0lBRUFsQixPQUNHbUIsTUFBTSxDQUF1QkMsMkJBQVEsRUFBRTtRQUFFQyxtQkFBbUI7SUFBSyxHQUNqRUYsTUFBTSxDQUFDRyxJQUFBQSxtQkFBbUIsRUFBQztRQUFFQyxnQkFBZ0J6QixXQUFXaUIsSUFBSTtJQUFDO0lBRWhFLE9BQU9mO0FBQ1Q7TUFFQSxXQUFlSCJ9