"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "find", {
    enumerable: true,
    get: function() {
        return find;
    }
});
const _database = require("payload/database");
const _buildSortParam = require("./queries/buildSortParam");
const _sanitizeInternalFields = /*#__PURE__*/ _interop_require_default(require("./utilities/sanitizeInternalFields"));
const _withSession = require("./withSession");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const find = async function find({ collection, limit, locale, page, pagination, req = {}, sort: sortArg, where }) {
    const Model = this.collections[collection];
    const collectionConfig = this.payload.collections[collection].config;
    const options = await (0, _withSession.withSession)(this, req);
    let hasNearConstraint = false;
    if (where) {
        const constraints = (0, _database.flattenWhereToOperators)(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    let sort;
    if (!hasNearConstraint) {
        sort = (0, _buildSortParam.buildSortParam)({
            config: this.payload.config,
            fields: collectionConfig.fields,
            locale,
            sort: sortArg || collectionConfig.defaultSort,
            timestamps: true
        });
    }
    const query = await Model.buildQuery({
        locale,
        payload: this.payload,
        where
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0;
    const paginationOptions = {
        forceCountFn: hasNearConstraint,
        lean: true,
        leanWithId: true,
        options,
        page,
        pagination,
        sort,
        useEstimatedCount
    };
    if (this.collation) {
        const defaultLocale = 'en';
        paginationOptions.collation = {
            locale: locale && locale !== 'all' && locale !== '*' ? locale : defaultLocale,
            ...this.collation
        };
    }
    if (!useEstimatedCount && Object.keys(query).length === 0 && this.disableIndexHints !== true) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding
        // a hint. By default, if no hint is provided, MongoDB does not use an indexed field to count the returned documents,
        // which makes queries very slow. This only happens when no query (filter) is provided. If one is provided, it uses
        // the correct indexed field
        paginationOptions.useCustomCountFn = ()=>{
            return Promise.resolve(Model.countDocuments(query, {
                ...options,
                hint: {
                    _id: 1
                }
            }));
        };
    }
    if (limit >= 0) {
        paginationOptions.limit = limit;
        // limit must also be set here, it's ignored when pagination is false
        paginationOptions.options.limit = limit;
        // Disable pagination if limit is 0
        if (limit === 0) {
            paginationOptions.pagination = false;
        }
    }
    const result = await Model.paginate(query, paginationOptions);
    const docs = this.jsonParse ? JSON.parse(JSON.stringify(result.docs)) : result.docs;
    return {
        ...result,
        docs: docs.map((doc)=>{
            return (0, _sanitizeInternalFields.default)(doc);
        })
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maW5kLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUGFnaW5hdGVPcHRpb25zIH0gZnJvbSAnbW9uZ29vc2UnXG5pbXBvcnQgdHlwZSB7IEZpbmQgfSBmcm9tICdwYXlsb2FkL2RhdGFiYXNlJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCB7IGZsYXR0ZW5XaGVyZVRvT3BlcmF0b3JzIH0gZnJvbSAncGF5bG9hZC9kYXRhYmFzZSdcblxuaW1wb3J0IHR5cGUgeyBNb25nb29zZUFkYXB0ZXIgfSBmcm9tICcuJ1xuXG5pbXBvcnQgeyBidWlsZFNvcnRQYXJhbSB9IGZyb20gJy4vcXVlcmllcy9idWlsZFNvcnRQYXJhbSdcbmltcG9ydCBzYW5pdGl6ZUludGVybmFsRmllbGRzIGZyb20gJy4vdXRpbGl0aWVzL3Nhbml0aXplSW50ZXJuYWxGaWVsZHMnXG5pbXBvcnQgeyB3aXRoU2Vzc2lvbiB9IGZyb20gJy4vd2l0aFNlc3Npb24nXG5cbmV4cG9ydCBjb25zdCBmaW5kOiBGaW5kID0gYXN5bmMgZnVuY3Rpb24gZmluZChcbiAgdGhpczogTW9uZ29vc2VBZGFwdGVyLFxuICB7IGNvbGxlY3Rpb24sIGxpbWl0LCBsb2NhbGUsIHBhZ2UsIHBhZ2luYXRpb24sIHJlcSA9IHt9IGFzIFBheWxvYWRSZXF1ZXN0LCBzb3J0OiBzb3J0QXJnLCB3aGVyZSB9LFxuKSB7XG4gIGNvbnN0IE1vZGVsID0gdGhpcy5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uXVxuICBjb25zdCBjb2xsZWN0aW9uQ29uZmlnID0gdGhpcy5wYXlsb2FkLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25dLmNvbmZpZ1xuICBjb25zdCBvcHRpb25zID0gYXdhaXQgd2l0aFNlc3Npb24odGhpcywgcmVxKVxuXG4gIGxldCBoYXNOZWFyQ29uc3RyYWludCA9IGZhbHNlXG5cbiAgaWYgKHdoZXJlKSB7XG4gICAgY29uc3QgY29uc3RyYWludHMgPSBmbGF0dGVuV2hlcmVUb09wZXJhdG9ycyh3aGVyZSlcbiAgICBoYXNOZWFyQ29uc3RyYWludCA9IGNvbnN0cmFpbnRzLnNvbWUoKHByb3ApID0+IE9iamVjdC5rZXlzKHByb3ApLnNvbWUoKGtleSkgPT4ga2V5ID09PSAnbmVhcicpKVxuICB9XG5cbiAgbGV0IHNvcnRcbiAgaWYgKCFoYXNOZWFyQ29uc3RyYWludCkge1xuICAgIHNvcnQgPSBidWlsZFNvcnRQYXJhbSh7XG4gICAgICBjb25maWc6IHRoaXMucGF5bG9hZC5jb25maWcsXG4gICAgICBmaWVsZHM6IGNvbGxlY3Rpb25Db25maWcuZmllbGRzLFxuICAgICAgbG9jYWxlLFxuICAgICAgc29ydDogc29ydEFyZyB8fCBjb2xsZWN0aW9uQ29uZmlnLmRlZmF1bHRTb3J0LFxuICAgICAgdGltZXN0YW1wczogdHJ1ZSxcbiAgICB9KVxuICB9XG5cbiAgY29uc3QgcXVlcnkgPSBhd2FpdCBNb2RlbC5idWlsZFF1ZXJ5KHtcbiAgICBsb2NhbGUsXG4gICAgcGF5bG9hZDogdGhpcy5wYXlsb2FkLFxuICAgIHdoZXJlLFxuICB9KVxuXG4gIC8vIHVzZUVzdGltYXRlZENvdW50IGlzIGZhc3RlciwgYnV0IG5vdCBhY2N1cmF0ZSwgYXMgaXQgaWdub3JlcyBhbnkgZmlsdGVycy4gSXQgaXMgdGh1cyBzZXQgdG8gdHJ1ZSBpZiB0aGVyZSBhcmUgbm8gZmlsdGVycy5cbiAgY29uc3QgdXNlRXN0aW1hdGVkQ291bnQgPSBoYXNOZWFyQ29uc3RyYWludCB8fCAhcXVlcnkgfHwgT2JqZWN0LmtleXMocXVlcnkpLmxlbmd0aCA9PT0gMFxuICBjb25zdCBwYWdpbmF0aW9uT3B0aW9uczogUGFnaW5hdGVPcHRpb25zID0ge1xuICAgIGZvcmNlQ291bnRGbjogaGFzTmVhckNvbnN0cmFpbnQsXG4gICAgbGVhbjogdHJ1ZSxcbiAgICBsZWFuV2l0aElkOiB0cnVlLFxuICAgIG9wdGlvbnMsXG4gICAgcGFnZSxcbiAgICBwYWdpbmF0aW9uLFxuICAgIHNvcnQsXG4gICAgdXNlRXN0aW1hdGVkQ291bnQsXG4gIH1cblxuICBpZiAodGhpcy5jb2xsYXRpb24pIHtcbiAgICBjb25zdCBkZWZhdWx0TG9jYWxlID0gJ2VuJ1xuICAgIHBhZ2luYXRpb25PcHRpb25zLmNvbGxhdGlvbiA9IHtcbiAgICAgIGxvY2FsZTogbG9jYWxlICYmIGxvY2FsZSAhPT0gJ2FsbCcgJiYgbG9jYWxlICE9PSAnKicgPyBsb2NhbGUgOiBkZWZhdWx0TG9jYWxlLFxuICAgICAgLi4udGhpcy5jb2xsYXRpb24sXG4gICAgfVxuICB9XG5cbiAgaWYgKCF1c2VFc3RpbWF0ZWRDb3VudCAmJiBPYmplY3Qua2V5cyhxdWVyeSkubGVuZ3RoID09PSAwICYmIHRoaXMuZGlzYWJsZUluZGV4SGludHMgIT09IHRydWUpIHtcbiAgICAvLyBJbXByb3ZlIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgY291bnREb2N1bWVudHMgcXVlcnkgd2hpY2ggaXMgdXNlZCBpZiB1c2VFc3RpbWF0ZWRDb3VudCBpcyBzZXQgdG8gZmFsc2UgYnkgYWRkaW5nXG4gICAgLy8gYSBoaW50LiBCeSBkZWZhdWx0LCBpZiBubyBoaW50IGlzIHByb3ZpZGVkLCBNb25nb0RCIGRvZXMgbm90IHVzZSBhbiBpbmRleGVkIGZpZWxkIHRvIGNvdW50IHRoZSByZXR1cm5lZCBkb2N1bWVudHMsXG4gICAgLy8gd2hpY2ggbWFrZXMgcXVlcmllcyB2ZXJ5IHNsb3cuIFRoaXMgb25seSBoYXBwZW5zIHdoZW4gbm8gcXVlcnkgKGZpbHRlcikgaXMgcHJvdmlkZWQuIElmIG9uZSBpcyBwcm92aWRlZCwgaXQgdXNlc1xuICAgIC8vIHRoZSBjb3JyZWN0IGluZGV4ZWQgZmllbGRcbiAgICBwYWdpbmF0aW9uT3B0aW9ucy51c2VDdXN0b21Db3VudEZuID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgTW9kZWwuY291bnREb2N1bWVudHMocXVlcnksIHtcbiAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgIGhpbnQ6IHsgX2lkOiAxIH0sXG4gICAgICAgIH0pLFxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGlmIChsaW1pdCA+PSAwKSB7XG4gICAgcGFnaW5hdGlvbk9wdGlvbnMubGltaXQgPSBsaW1pdFxuICAgIC8vIGxpbWl0IG11c3QgYWxzbyBiZSBzZXQgaGVyZSwgaXQncyBpZ25vcmVkIHdoZW4gcGFnaW5hdGlvbiBpcyBmYWxzZVxuICAgIHBhZ2luYXRpb25PcHRpb25zLm9wdGlvbnMubGltaXQgPSBsaW1pdFxuXG4gICAgLy8gRGlzYWJsZSBwYWdpbmF0aW9uIGlmIGxpbWl0IGlzIDBcbiAgICBpZiAobGltaXQgPT09IDApIHtcbiAgICAgIHBhZ2luYXRpb25PcHRpb25zLnBhZ2luYXRpb24gPSBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IE1vZGVsLnBhZ2luYXRlKHF1ZXJ5LCBwYWdpbmF0aW9uT3B0aW9ucylcblxuICBjb25zdCBkb2NzID0gdGhpcy5qc29uUGFyc2UgPyBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJlc3VsdC5kb2NzKSkgOiByZXN1bHQuZG9jc1xuXG4gIHJldHVybiB7XG4gICAgLi4ucmVzdWx0LFxuICAgIGRvY3M6IGRvY3MubWFwKChkb2MpID0+IHtcbiAgICAgIHJldHVybiBzYW5pdGl6ZUludGVybmFsRmllbGRzKGRvYylcbiAgICB9KSxcbiAgfVxufVxuIl0sIm5hbWVzIjpbImZpbmQiLCJjb2xsZWN0aW9uIiwibGltaXQiLCJsb2NhbGUiLCJwYWdlIiwicGFnaW5hdGlvbiIsInJlcSIsInNvcnQiLCJzb3J0QXJnIiwid2hlcmUiLCJNb2RlbCIsImNvbGxlY3Rpb25zIiwiY29sbGVjdGlvbkNvbmZpZyIsInBheWxvYWQiLCJjb25maWciLCJvcHRpb25zIiwid2l0aFNlc3Npb24iLCJoYXNOZWFyQ29uc3RyYWludCIsImNvbnN0cmFpbnRzIiwiZmxhdHRlbldoZXJlVG9PcGVyYXRvcnMiLCJzb21lIiwicHJvcCIsIk9iamVjdCIsImtleXMiLCJrZXkiLCJidWlsZFNvcnRQYXJhbSIsImZpZWxkcyIsImRlZmF1bHRTb3J0IiwidGltZXN0YW1wcyIsInF1ZXJ5IiwiYnVpbGRRdWVyeSIsInVzZUVzdGltYXRlZENvdW50IiwibGVuZ3RoIiwicGFnaW5hdGlvbk9wdGlvbnMiLCJmb3JjZUNvdW50Rm4iLCJsZWFuIiwibGVhbldpdGhJZCIsImNvbGxhdGlvbiIsImRlZmF1bHRMb2NhbGUiLCJkaXNhYmxlSW5kZXhIaW50cyIsInVzZUN1c3RvbUNvdW50Rm4iLCJQcm9taXNlIiwicmVzb2x2ZSIsImNvdW50RG9jdW1lbnRzIiwiaGludCIsIl9pZCIsInJlc3VsdCIsInBhZ2luYXRlIiwiZG9jcyIsImpzb25QYXJzZSIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsIm1hcCIsImRvYyIsInNhbml0aXplSW50ZXJuYWxGaWVsZHMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQVlhQTs7O2VBQUFBOzs7MEJBUjJCO2dDQUlUOytFQUNJOzZCQUNQOzs7Ozs7QUFFckIsTUFBTUEsT0FBYSxlQUFlQSxLQUV2QyxFQUFFQyxVQUFVLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLFVBQVUsRUFBRUMsTUFBTSxDQUFDLENBQW1CLEVBQUVDLE1BQU1DLE9BQU8sRUFBRUMsS0FBSyxFQUFFO0lBRWpHLE1BQU1DLFFBQVEsSUFBSSxDQUFDQyxXQUFXLENBQUNWLFdBQVc7SUFDMUMsTUFBTVcsbUJBQW1CLElBQUksQ0FBQ0MsT0FBTyxDQUFDRixXQUFXLENBQUNWLFdBQVcsQ0FBQ2EsTUFBTTtJQUNwRSxNQUFNQyxVQUFVLE1BQU1DLElBQUFBLHdCQUFXLEVBQUMsSUFBSSxFQUFFVjtJQUV4QyxJQUFJVyxvQkFBb0I7SUFFeEIsSUFBSVIsT0FBTztRQUNULE1BQU1TLGNBQWNDLElBQUFBLGlDQUF1QixFQUFDVjtRQUM1Q1Esb0JBQW9CQyxZQUFZRSxJQUFJLENBQUMsQ0FBQ0MsT0FBU0MsT0FBT0MsSUFBSSxDQUFDRixNQUFNRCxJQUFJLENBQUMsQ0FBQ0ksTUFBUUEsUUFBUTtJQUN6RjtJQUVBLElBQUlqQjtJQUNKLElBQUksQ0FBQ1UsbUJBQW1CO1FBQ3RCVixPQUFPa0IsSUFBQUEsOEJBQWMsRUFBQztZQUNwQlgsUUFBUSxJQUFJLENBQUNELE9BQU8sQ0FBQ0MsTUFBTTtZQUMzQlksUUFBUWQsaUJBQWlCYyxNQUFNO1lBQy9CdkI7WUFDQUksTUFBTUMsV0FBV0ksaUJBQWlCZSxXQUFXO1lBQzdDQyxZQUFZO1FBQ2Q7SUFDRjtJQUVBLE1BQU1DLFFBQVEsTUFBTW5CLE1BQU1vQixVQUFVLENBQUM7UUFDbkMzQjtRQUNBVSxTQUFTLElBQUksQ0FBQ0EsT0FBTztRQUNyQko7SUFDRjtJQUVBLDRIQUE0SDtJQUM1SCxNQUFNc0Isb0JBQW9CZCxxQkFBcUIsQ0FBQ1ksU0FBU1AsT0FBT0MsSUFBSSxDQUFDTSxPQUFPRyxNQUFNLEtBQUs7SUFDdkYsTUFBTUMsb0JBQXFDO1FBQ3pDQyxjQUFjakI7UUFDZGtCLE1BQU07UUFDTkMsWUFBWTtRQUNackI7UUFDQVg7UUFDQUM7UUFDQUU7UUFDQXdCO0lBQ0Y7SUFFQSxJQUFJLElBQUksQ0FBQ00sU0FBUyxFQUFFO1FBQ2xCLE1BQU1DLGdCQUFnQjtRQUN0Qkwsa0JBQWtCSSxTQUFTLEdBQUc7WUFDNUJsQyxRQUFRQSxVQUFVQSxXQUFXLFNBQVNBLFdBQVcsTUFBTUEsU0FBU21DO1lBQ2hFLEdBQUcsSUFBSSxDQUFDRCxTQUFTO1FBQ25CO0lBQ0Y7SUFFQSxJQUFJLENBQUNOLHFCQUFxQlQsT0FBT0MsSUFBSSxDQUFDTSxPQUFPRyxNQUFNLEtBQUssS0FBSyxJQUFJLENBQUNPLGlCQUFpQixLQUFLLE1BQU07UUFDNUYsbUhBQW1IO1FBQ25ILHFIQUFxSDtRQUNySCxtSEFBbUg7UUFDbkgsNEJBQTRCO1FBQzVCTixrQkFBa0JPLGdCQUFnQixHQUFHO1lBQ25DLE9BQU9DLFFBQVFDLE9BQU8sQ0FDcEJoQyxNQUFNaUMsY0FBYyxDQUFDZCxPQUFPO2dCQUMxQixHQUFHZCxPQUFPO2dCQUNWNkIsTUFBTTtvQkFBRUMsS0FBSztnQkFBRTtZQUNqQjtRQUVKO0lBQ0Y7SUFFQSxJQUFJM0MsU0FBUyxHQUFHO1FBQ2QrQixrQkFBa0IvQixLQUFLLEdBQUdBO1FBQzFCLHFFQUFxRTtRQUNyRStCLGtCQUFrQmxCLE9BQU8sQ0FBQ2IsS0FBSyxHQUFHQTtRQUVsQyxtQ0FBbUM7UUFDbkMsSUFBSUEsVUFBVSxHQUFHO1lBQ2YrQixrQkFBa0I1QixVQUFVLEdBQUc7UUFDakM7SUFDRjtJQUVBLE1BQU15QyxTQUFTLE1BQU1wQyxNQUFNcUMsUUFBUSxDQUFDbEIsT0FBT0k7SUFFM0MsTUFBTWUsT0FBTyxJQUFJLENBQUNDLFNBQVMsR0FBR0MsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxTQUFTLENBQUNOLE9BQU9FLElBQUksS0FBS0YsT0FBT0UsSUFBSTtJQUVuRixPQUFPO1FBQ0wsR0FBR0YsTUFBTTtRQUNURSxNQUFNQSxLQUFLSyxHQUFHLENBQUMsQ0FBQ0M7WUFDZCxPQUFPQyxJQUFBQSwrQkFBc0IsRUFBQ0Q7UUFDaEM7SUFDRjtBQUNGIn0=