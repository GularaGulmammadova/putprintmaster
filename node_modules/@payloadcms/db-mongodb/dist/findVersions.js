"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "findVersions", {
    enumerable: true,
    get: function() {
        return findVersions;
    }
});
const _database = require("payload/database");
const _buildSortParam = require("./queries/buildSortParam");
const _sanitizeInternalFields = /*#__PURE__*/ _interop_require_default(require("./utilities/sanitizeInternalFields"));
const _withSession = require("./withSession");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const findVersions = async function findVersions({ collection, limit, locale, page, pagination, req = {}, skip, sort: sortArg, where }) {
    const Model = this.versions[collection];
    const collectionConfig = this.payload.collections[collection].config;
    const options = {
        ...await (0, _withSession.withSession)(this, req),
        limit,
        skip
    };
    let hasNearConstraint = false;
    if (where) {
        const constraints = (0, _database.flattenWhereToOperators)(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    let sort;
    if (!hasNearConstraint) {
        sort = (0, _buildSortParam.buildSortParam)({
            config: this.payload.config,
            fields: collectionConfig.fields,
            locale,
            sort: sortArg || '-updatedAt',
            timestamps: true
        });
    }
    const query = await Model.buildQuery({
        locale,
        payload: this.payload,
        where
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0;
    const paginationOptions = {
        forceCountFn: hasNearConstraint,
        lean: true,
        leanWithId: true,
        limit,
        options,
        page,
        pagination,
        sort,
        useEstimatedCount
    };
    if (this.collation) {
        const defaultLocale = 'en';
        paginationOptions.collation = {
            locale: locale && locale !== 'all' && locale !== '*' ? locale : defaultLocale,
            ...this.collation
        };
    }
    if (!useEstimatedCount && Object.keys(query).length === 0 && this.disableIndexHints !== true) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding
        // a hint. By default, if no hint is provided, MongoDB does not use an indexed field to count the returned documents,
        // which makes queries very slow. This only happens when no query (filter) is provided. If one is provided, it uses
        // the correct indexed field
        paginationOptions.useCustomCountFn = ()=>{
            return Promise.resolve(Model.countDocuments(query, {
                ...options,
                hint: {
                    _id: 1
                }
            }));
        };
    }
    if (limit >= 0) {
        paginationOptions.limit = limit;
        // limit must also be set here, it's ignored when pagination is false
        paginationOptions.options.limit = limit;
        // Disable pagination if limit is 0
        if (limit === 0) {
            paginationOptions.pagination = false;
        }
    }
    const result = await Model.paginate(query, paginationOptions);
    const docs = this.jsonParse ? JSON.parse(JSON.stringify(result.docs)) : result.docs;
    return {
        ...result,
        docs: docs.map((doc)=>{
            return (0, _sanitizeInternalFields.default)(doc);
        })
    };
};

//# sourceMappingURL=data:application/json;base64,