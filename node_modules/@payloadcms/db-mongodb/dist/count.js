"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "count", {
    enumerable: true,
    get: function() {
        return count;
    }
});
const _database = require("payload/database");
const _withSession = require("./withSession");
const count = async function count({ collection, locale, req = {}, where }) {
    const Model = this.collections[collection];
    const options = await (0, _withSession.withSession)(this, req);
    let hasNearConstraint = false;
    if (where) {
        const constraints = (0, _database.flattenWhereToOperators)(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    const query = await Model.buildQuery({
        locale,
        payload: this.payload,
        where
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0;
    if (!useEstimatedCount && Object.keys(query).length === 0 && this.disableIndexHints !== true) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding
        // a hint. By default, if no hint is provided, MongoDB does not use an indexed field to count the returned documents,
        // which makes queries very slow. This only happens when no query (filter) is provided. If one is provided, it uses
        // the correct indexed field
        options.hint = {
            _id: 1
        };
    }
    const result = await Model.countDocuments(query, options);
    return {
        totalDocs: result
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3VudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFF1ZXJ5T3B0aW9ucyB9IGZyb20gJ21vbmdvb3NlJ1xuaW1wb3J0IHR5cGUgeyBDb3VudCB9IGZyb20gJ3BheWxvYWQvZGF0YWJhc2UnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0IH0gZnJvbSAncGF5bG9hZC90eXBlcydcblxuaW1wb3J0IHsgZmxhdHRlbldoZXJlVG9PcGVyYXRvcnMgfSBmcm9tICdwYXlsb2FkL2RhdGFiYXNlJ1xuXG5pbXBvcnQgdHlwZSB7IE1vbmdvb3NlQWRhcHRlciB9IGZyb20gJy4nXG5cbmltcG9ydCB7IHdpdGhTZXNzaW9uIH0gZnJvbSAnLi93aXRoU2Vzc2lvbidcblxuZXhwb3J0IGNvbnN0IGNvdW50OiBDb3VudCA9IGFzeW5jIGZ1bmN0aW9uIGNvdW50KFxuICB0aGlzOiBNb25nb29zZUFkYXB0ZXIsXG4gIHsgY29sbGVjdGlvbiwgbG9jYWxlLCByZXEgPSB7fSBhcyBQYXlsb2FkUmVxdWVzdCwgd2hlcmUgfSxcbikge1xuICBjb25zdCBNb2RlbCA9IHRoaXMuY29sbGVjdGlvbnNbY29sbGVjdGlvbl1cbiAgY29uc3Qgb3B0aW9uczogUXVlcnlPcHRpb25zID0gYXdhaXQgd2l0aFNlc3Npb24odGhpcywgcmVxKVxuXG4gIGxldCBoYXNOZWFyQ29uc3RyYWludCA9IGZhbHNlXG5cbiAgaWYgKHdoZXJlKSB7XG4gICAgY29uc3QgY29uc3RyYWludHMgPSBmbGF0dGVuV2hlcmVUb09wZXJhdG9ycyh3aGVyZSlcbiAgICBoYXNOZWFyQ29uc3RyYWludCA9IGNvbnN0cmFpbnRzLnNvbWUoKHByb3ApID0+IE9iamVjdC5rZXlzKHByb3ApLnNvbWUoKGtleSkgPT4ga2V5ID09PSAnbmVhcicpKVxuICB9XG5cbiAgY29uc3QgcXVlcnkgPSBhd2FpdCBNb2RlbC5idWlsZFF1ZXJ5KHtcbiAgICBsb2NhbGUsXG4gICAgcGF5bG9hZDogdGhpcy5wYXlsb2FkLFxuICAgIHdoZXJlLFxuICB9KVxuXG4gIC8vIHVzZUVzdGltYXRlZENvdW50IGlzIGZhc3RlciwgYnV0IG5vdCBhY2N1cmF0ZSwgYXMgaXQgaWdub3JlcyBhbnkgZmlsdGVycy4gSXQgaXMgdGh1cyBzZXQgdG8gdHJ1ZSBpZiB0aGVyZSBhcmUgbm8gZmlsdGVycy5cbiAgY29uc3QgdXNlRXN0aW1hdGVkQ291bnQgPSBoYXNOZWFyQ29uc3RyYWludCB8fCAhcXVlcnkgfHwgT2JqZWN0LmtleXMocXVlcnkpLmxlbmd0aCA9PT0gMFxuXG4gIGlmICghdXNlRXN0aW1hdGVkQ291bnQgJiYgT2JqZWN0LmtleXMocXVlcnkpLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmRpc2FibGVJbmRleEhpbnRzICE9PSB0cnVlKSB7XG4gICAgLy8gSW1wcm92ZSB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlIGNvdW50RG9jdW1lbnRzIHF1ZXJ5IHdoaWNoIGlzIHVzZWQgaWYgdXNlRXN0aW1hdGVkQ291bnQgaXMgc2V0IHRvIGZhbHNlIGJ5IGFkZGluZ1xuICAgIC8vIGEgaGludC4gQnkgZGVmYXVsdCwgaWYgbm8gaGludCBpcyBwcm92aWRlZCwgTW9uZ29EQiBkb2VzIG5vdCB1c2UgYW4gaW5kZXhlZCBmaWVsZCB0byBjb3VudCB0aGUgcmV0dXJuZWQgZG9jdW1lbnRzLFxuICAgIC8vIHdoaWNoIG1ha2VzIHF1ZXJpZXMgdmVyeSBzbG93LiBUaGlzIG9ubHkgaGFwcGVucyB3aGVuIG5vIHF1ZXJ5IChmaWx0ZXIpIGlzIHByb3ZpZGVkLiBJZiBvbmUgaXMgcHJvdmlkZWQsIGl0IHVzZXNcbiAgICAvLyB0aGUgY29ycmVjdCBpbmRleGVkIGZpZWxkXG4gICAgb3B0aW9ucy5oaW50ID0ge1xuICAgICAgX2lkOiAxLFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IE1vZGVsLmNvdW50RG9jdW1lbnRzKHF1ZXJ5LCBvcHRpb25zKVxuXG4gIHJldHVybiB7XG4gICAgdG90YWxEb2NzOiByZXN1bHQsXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJjb3VudCIsImNvbGxlY3Rpb24iLCJsb2NhbGUiLCJyZXEiLCJ3aGVyZSIsIk1vZGVsIiwiY29sbGVjdGlvbnMiLCJvcHRpb25zIiwid2l0aFNlc3Npb24iLCJoYXNOZWFyQ29uc3RyYWludCIsImNvbnN0cmFpbnRzIiwiZmxhdHRlbldoZXJlVG9PcGVyYXRvcnMiLCJzb21lIiwicHJvcCIsIk9iamVjdCIsImtleXMiLCJrZXkiLCJxdWVyeSIsImJ1aWxkUXVlcnkiLCJwYXlsb2FkIiwidXNlRXN0aW1hdGVkQ291bnQiLCJsZW5ndGgiLCJkaXNhYmxlSW5kZXhIaW50cyIsImhpbnQiLCJfaWQiLCJyZXN1bHQiLCJjb3VudERvY3VtZW50cyIsInRvdGFsRG9jcyJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQVVhQTs7O2VBQUFBOzs7MEJBTjJCOzZCQUlaO0FBRXJCLE1BQU1BLFFBQWUsZUFBZUEsTUFFekMsRUFBRUMsVUFBVSxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sQ0FBQyxDQUFtQixFQUFFQyxLQUFLLEVBQUU7SUFFekQsTUFBTUMsUUFBUSxJQUFJLENBQUNDLFdBQVcsQ0FBQ0wsV0FBVztJQUMxQyxNQUFNTSxVQUF3QixNQUFNQyxJQUFBQSx3QkFBVyxFQUFDLElBQUksRUFBRUw7SUFFdEQsSUFBSU0sb0JBQW9CO0lBRXhCLElBQUlMLE9BQU87UUFDVCxNQUFNTSxjQUFjQyxJQUFBQSxpQ0FBdUIsRUFBQ1A7UUFDNUNLLG9CQUFvQkMsWUFBWUUsSUFBSSxDQUFDLENBQUNDLE9BQVNDLE9BQU9DLElBQUksQ0FBQ0YsTUFBTUQsSUFBSSxDQUFDLENBQUNJLE1BQVFBLFFBQVE7SUFDekY7SUFFQSxNQUFNQyxRQUFRLE1BQU1aLE1BQU1hLFVBQVUsQ0FBQztRQUNuQ2hCO1FBQ0FpQixTQUFTLElBQUksQ0FBQ0EsT0FBTztRQUNyQmY7SUFDRjtJQUVBLDRIQUE0SDtJQUM1SCxNQUFNZ0Isb0JBQW9CWCxxQkFBcUIsQ0FBQ1EsU0FBU0gsT0FBT0MsSUFBSSxDQUFDRSxPQUFPSSxNQUFNLEtBQUs7SUFFdkYsSUFBSSxDQUFDRCxxQkFBcUJOLE9BQU9DLElBQUksQ0FBQ0UsT0FBT0ksTUFBTSxLQUFLLEtBQUssSUFBSSxDQUFDQyxpQkFBaUIsS0FBSyxNQUFNO1FBQzVGLG1IQUFtSDtRQUNuSCxxSEFBcUg7UUFDckgsbUhBQW1IO1FBQ25ILDRCQUE0QjtRQUM1QmYsUUFBUWdCLElBQUksR0FBRztZQUNiQyxLQUFLO1FBQ1A7SUFDRjtJQUVBLE1BQU1DLFNBQVMsTUFBTXBCLE1BQU1xQixjQUFjLENBQUNULE9BQU9WO0lBRWpELE9BQU87UUFDTG9CLFdBQVdGO0lBQ2I7QUFDRiJ9