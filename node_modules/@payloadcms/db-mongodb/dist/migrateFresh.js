"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "migrateFresh", {
    enumerable: true,
    get: function() {
        return migrateFresh;
    }
});
const _database = require("payload/database");
const _commitTransaction = require("payload/dist/utilities/commitTransaction");
const _initTransaction = require("payload/dist/utilities/initTransaction");
const _killTransaction = require("payload/dist/utilities/killTransaction");
const _prompts = /*#__PURE__*/ _interop_require_default(require("prompts"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function migrateFresh({ forceAcceptWarning = false }) {
    const { payload } = this;
    if (!forceAcceptWarning) {
        const { confirm: acceptWarning } = await (0, _prompts.default)({
            name: 'confirm',
            type: 'confirm',
            initial: false,
            message: `WARNING: This will drop your database and run all migrations. Are you sure you want to proceed?`
        }, {
            onCancel: ()=>{
                process.exit(0);
            }
        });
        if (!acceptWarning) {
            process.exit(0);
        }
    }
    payload.logger.info({
        msg: `Dropping database.`
    });
    await this.connection.dropDatabase();
    const migrationFiles = await (0, _database.readMigrationFiles)({
        payload
    });
    payload.logger.debug({
        msg: `Found ${migrationFiles.length} migration files.`
    });
    const req = {
        payload
    };
    // Run all migrate up
    for (const migration of migrationFiles){
        payload.logger.info({
            msg: `Migrating: ${migration.name}`
        });
        try {
            const start = Date.now();
            await (0, _initTransaction.initTransaction)(req);
            await migration.up({
                payload,
                req
            });
            await payload.create({
                collection: 'payload-migrations',
                data: {
                    name: migration.name,
                    batch: 1
                },
                req
            });
            await (0, _commitTransaction.commitTransaction)(req);
            payload.logger.info({
                msg: `Migrated:  ${migration.name} (${Date.now() - start}ms)`
            });
        } catch (err) {
            await (0, _killTransaction.killTransaction)(req);
            payload.logger.error({
                err,
                msg: `Error running migration ${migration.name}. Rolling back.`
            });
            throw err;
        }
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9taWdyYXRlRnJlc2gudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCB7IHJlYWRNaWdyYXRpb25GaWxlcyB9IGZyb20gJ3BheWxvYWQvZGF0YWJhc2UnXG5pbXBvcnQgeyBjb21taXRUcmFuc2FjdGlvbiB9IGZyb20gJ3BheWxvYWQvZGlzdC91dGlsaXRpZXMvY29tbWl0VHJhbnNhY3Rpb24nXG5pbXBvcnQgeyBpbml0VHJhbnNhY3Rpb24gfSBmcm9tICdwYXlsb2FkL2Rpc3QvdXRpbGl0aWVzL2luaXRUcmFuc2FjdGlvbidcbmltcG9ydCB7IGtpbGxUcmFuc2FjdGlvbiB9IGZyb20gJ3BheWxvYWQvZGlzdC91dGlsaXRpZXMva2lsbFRyYW5zYWN0aW9uJ1xuaW1wb3J0IHByb21wdHMgZnJvbSAncHJvbXB0cydcblxuaW1wb3J0IHR5cGUgeyBNb25nb29zZUFkYXB0ZXIgfSBmcm9tICcuJ1xuXG4vKipcbiAqIERyb3AgdGhlIGN1cnJlbnQgZGF0YWJhc2UgYW5kIHJ1biBhbGwgbWlncmF0ZSB1cCBmdW5jdGlvbnNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1pZ3JhdGVGcmVzaChcbiAgdGhpczogTW9uZ29vc2VBZGFwdGVyLFxuICB7IGZvcmNlQWNjZXB0V2FybmluZyA9IGZhbHNlIH06IHsgZm9yY2VBY2NlcHRXYXJuaW5nPzogYm9vbGVhbiB9LFxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHsgcGF5bG9hZCB9ID0gdGhpc1xuXG4gIGlmICghZm9yY2VBY2NlcHRXYXJuaW5nKSB7XG4gICAgY29uc3QgeyBjb25maXJtOiBhY2NlcHRXYXJuaW5nIH0gPSBhd2FpdCBwcm9tcHRzKFxuICAgICAge1xuICAgICAgICBuYW1lOiAnY29uZmlybScsXG4gICAgICAgIHR5cGU6ICdjb25maXJtJyxcbiAgICAgICAgaW5pdGlhbDogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2U6IGBXQVJOSU5HOiBUaGlzIHdpbGwgZHJvcCB5b3VyIGRhdGFiYXNlIGFuZCBydW4gYWxsIG1pZ3JhdGlvbnMuIEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBwcm9jZWVkP2AsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBvbkNhbmNlbDogKCkgPT4ge1xuICAgICAgICAgIHByb2Nlc3MuZXhpdCgwKVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICApXG5cbiAgICBpZiAoIWFjY2VwdFdhcm5pbmcpIHtcbiAgICAgIHByb2Nlc3MuZXhpdCgwKVxuICAgIH1cbiAgfVxuXG4gIHBheWxvYWQubG9nZ2VyLmluZm8oe1xuICAgIG1zZzogYERyb3BwaW5nIGRhdGFiYXNlLmAsXG4gIH0pXG5cbiAgYXdhaXQgdGhpcy5jb25uZWN0aW9uLmRyb3BEYXRhYmFzZSgpXG5cbiAgY29uc3QgbWlncmF0aW9uRmlsZXMgPSBhd2FpdCByZWFkTWlncmF0aW9uRmlsZXMoeyBwYXlsb2FkIH0pXG4gIHBheWxvYWQubG9nZ2VyLmRlYnVnKHtcbiAgICBtc2c6IGBGb3VuZCAke21pZ3JhdGlvbkZpbGVzLmxlbmd0aH0gbWlncmF0aW9uIGZpbGVzLmAsXG4gIH0pXG5cbiAgY29uc3QgcmVxID0geyBwYXlsb2FkIH0gYXMgUGF5bG9hZFJlcXVlc3RcblxuICAvLyBSdW4gYWxsIG1pZ3JhdGUgdXBcbiAgZm9yIChjb25zdCBtaWdyYXRpb24gb2YgbWlncmF0aW9uRmlsZXMpIHtcbiAgICBwYXlsb2FkLmxvZ2dlci5pbmZvKHsgbXNnOiBgTWlncmF0aW5nOiAke21pZ3JhdGlvbi5uYW1lfWAgfSlcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgICBhd2FpdCBpbml0VHJhbnNhY3Rpb24ocmVxKVxuICAgICAgYXdhaXQgbWlncmF0aW9uLnVwKHsgcGF5bG9hZCwgcmVxIH0pXG4gICAgICBhd2FpdCBwYXlsb2FkLmNyZWF0ZSh7XG4gICAgICAgIGNvbGxlY3Rpb246ICdwYXlsb2FkLW1pZ3JhdGlvbnMnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgbmFtZTogbWlncmF0aW9uLm5hbWUsXG4gICAgICAgICAgYmF0Y2g6IDEsXG4gICAgICAgIH0sXG4gICAgICAgIHJlcSxcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IGNvbW1pdFRyYW5zYWN0aW9uKHJlcSlcblxuICAgICAgcGF5bG9hZC5sb2dnZXIuaW5mbyh7IG1zZzogYE1pZ3JhdGVkOiAgJHttaWdyYXRpb24ubmFtZX0gKCR7RGF0ZS5ub3coKSAtIHN0YXJ0fW1zKWAgfSlcbiAgICB9IGNhdGNoIChlcnI6IHVua25vd24pIHtcbiAgICAgIGF3YWl0IGtpbGxUcmFuc2FjdGlvbihyZXEpXG4gICAgICBwYXlsb2FkLmxvZ2dlci5lcnJvcih7XG4gICAgICAgIGVycixcbiAgICAgICAgbXNnOiBgRXJyb3IgcnVubmluZyBtaWdyYXRpb24gJHttaWdyYXRpb24ubmFtZX0uIFJvbGxpbmcgYmFjay5gLFxuICAgICAgfSlcbiAgICAgIHRocm93IGVyclxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1pZ3JhdGVGcmVzaCIsImZvcmNlQWNjZXB0V2FybmluZyIsInBheWxvYWQiLCJjb25maXJtIiwiYWNjZXB0V2FybmluZyIsInByb21wdHMiLCJuYW1lIiwidHlwZSIsImluaXRpYWwiLCJtZXNzYWdlIiwib25DYW5jZWwiLCJwcm9jZXNzIiwiZXhpdCIsImxvZ2dlciIsImluZm8iLCJtc2ciLCJjb25uZWN0aW9uIiwiZHJvcERhdGFiYXNlIiwibWlncmF0aW9uRmlsZXMiLCJyZWFkTWlncmF0aW9uRmlsZXMiLCJkZWJ1ZyIsImxlbmd0aCIsInJlcSIsIm1pZ3JhdGlvbiIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsImluaXRUcmFuc2FjdGlvbiIsInVwIiwiY3JlYXRlIiwiY29sbGVjdGlvbiIsImRhdGEiLCJiYXRjaCIsImNvbW1pdFRyYW5zYWN0aW9uIiwiZXJyIiwia2lsbFRyYW5zYWN0aW9uIiwiZXJyb3IiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBYXNCQTs7O2VBQUFBOzs7MEJBWGE7bUNBQ0Q7aUNBQ0Y7aUNBQ0E7Z0VBQ1o7Ozs7OztBQU9iLGVBQWVBLGFBRXBCLEVBQUVDLHFCQUFxQixLQUFLLEVBQW9DO0lBRWhFLE1BQU0sRUFBRUMsT0FBTyxFQUFFLEdBQUcsSUFBSTtJQUV4QixJQUFJLENBQUNELG9CQUFvQjtRQUN2QixNQUFNLEVBQUVFLFNBQVNDLGFBQWEsRUFBRSxHQUFHLE1BQU1DLElBQUFBLGdCQUFPLEVBQzlDO1lBQ0VDLE1BQU07WUFDTkMsTUFBTTtZQUNOQyxTQUFTO1lBQ1RDLFNBQVMsQ0FBQywrRkFBK0YsQ0FBQztRQUM1RyxHQUNBO1lBQ0VDLFVBQVU7Z0JBQ1JDLFFBQVFDLElBQUksQ0FBQztZQUNmO1FBQ0Y7UUFHRixJQUFJLENBQUNSLGVBQWU7WUFDbEJPLFFBQVFDLElBQUksQ0FBQztRQUNmO0lBQ0Y7SUFFQVYsUUFBUVcsTUFBTSxDQUFDQyxJQUFJLENBQUM7UUFDbEJDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztJQUMzQjtJQUVBLE1BQU0sSUFBSSxDQUFDQyxVQUFVLENBQUNDLFlBQVk7SUFFbEMsTUFBTUMsaUJBQWlCLE1BQU1DLElBQUFBLDRCQUFrQixFQUFDO1FBQUVqQjtJQUFRO0lBQzFEQSxRQUFRVyxNQUFNLENBQUNPLEtBQUssQ0FBQztRQUNuQkwsS0FBSyxDQUFDLE1BQU0sRUFBRUcsZUFBZUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDO0lBQ3hEO0lBRUEsTUFBTUMsTUFBTTtRQUFFcEI7SUFBUTtJQUV0QixxQkFBcUI7SUFDckIsS0FBSyxNQUFNcUIsYUFBYUwsZUFBZ0I7UUFDdENoQixRQUFRVyxNQUFNLENBQUNDLElBQUksQ0FBQztZQUFFQyxLQUFLLENBQUMsV0FBVyxFQUFFUSxVQUFVakIsSUFBSSxDQUFDLENBQUM7UUFBQztRQUMxRCxJQUFJO1lBQ0YsTUFBTWtCLFFBQVFDLEtBQUtDLEdBQUc7WUFDdEIsTUFBTUMsSUFBQUEsZ0NBQWUsRUFBQ0w7WUFDdEIsTUFBTUMsVUFBVUssRUFBRSxDQUFDO2dCQUFFMUI7Z0JBQVNvQjtZQUFJO1lBQ2xDLE1BQU1wQixRQUFRMkIsTUFBTSxDQUFDO2dCQUNuQkMsWUFBWTtnQkFDWkMsTUFBTTtvQkFDSnpCLE1BQU1pQixVQUFVakIsSUFBSTtvQkFDcEIwQixPQUFPO2dCQUNUO2dCQUNBVjtZQUNGO1lBRUEsTUFBTVcsSUFBQUEsb0NBQWlCLEVBQUNYO1lBRXhCcEIsUUFBUVcsTUFBTSxDQUFDQyxJQUFJLENBQUM7Z0JBQUVDLEtBQUssQ0FBQyxXQUFXLEVBQUVRLFVBQVVqQixJQUFJLENBQUMsRUFBRSxFQUFFbUIsS0FBS0MsR0FBRyxLQUFLRixNQUFNLEdBQUcsQ0FBQztZQUFDO1FBQ3RGLEVBQUUsT0FBT1UsS0FBYztZQUNyQixNQUFNQyxJQUFBQSxnQ0FBZSxFQUFDYjtZQUN0QnBCLFFBQVFXLE1BQU0sQ0FBQ3VCLEtBQUssQ0FBQztnQkFDbkJGO2dCQUNBbkIsS0FBSyxDQUFDLHdCQUF3QixFQUFFUSxVQUFVakIsSUFBSSxDQUFDLGVBQWUsQ0FBQztZQUNqRTtZQUNBLE1BQU00QjtRQUNSO0lBQ0Y7QUFDRiJ9