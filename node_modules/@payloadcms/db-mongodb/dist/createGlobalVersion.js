"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createGlobalVersion", {
    enumerable: true,
    get: function() {
        return createGlobalVersion;
    }
});
const _sanitizeInternalFields = /*#__PURE__*/ _interop_require_default(require("./utilities/sanitizeInternalFields"));
const _withSession = require("./withSession");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const createGlobalVersion = async function createGlobalVersion({ autosave, createdAt, globalSlug, parent, req = {}, updatedAt, versionData }) {
    const VersionModel = this.versions[globalSlug];
    const options = await (0, _withSession.withSession)(this, req);
    const [doc] = await VersionModel.create([
        {
            autosave,
            createdAt,
            latest: true,
            parent,
            updatedAt,
            version: versionData
        }
    ], options, req);
    await VersionModel.updateMany({
        $and: [
            {
                _id: {
                    $ne: doc._id
                }
            },
            {
                parent: {
                    $eq: parent
                }
            },
            {
                latest: {
                    $eq: true
                }
            }
        ]
    }, {
        $unset: {
            latest: 1
        }
    }, options);
    const result = this.jsonParse ? JSON.parse(JSON.stringify(doc)) : doc.toObject();
    const verificationToken = doc._verificationToken;
    if (verificationToken) {
        result._verificationToken = verificationToken;
    }
    return (0, _sanitizeInternalFields.default)(result);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVHbG9iYWxWZXJzaW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ3JlYXRlR2xvYmFsVmVyc2lvbiB9IGZyb20gJ3BheWxvYWQvZGF0YWJhc2UnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0IH0gZnJvbSAncGF5bG9hZC90eXBlcydcblxuaW1wb3J0IHR5cGUgeyBNb25nb29zZUFkYXB0ZXIgfSBmcm9tICcuJ1xuXG5pbXBvcnQgc2FuaXRpemVJbnRlcm5hbEZpZWxkcyBmcm9tICcuL3V0aWxpdGllcy9zYW5pdGl6ZUludGVybmFsRmllbGRzJ1xuaW1wb3J0IHsgd2l0aFNlc3Npb24gfSBmcm9tICcuL3dpdGhTZXNzaW9uJ1xuXG5leHBvcnQgY29uc3QgY3JlYXRlR2xvYmFsVmVyc2lvbjogQ3JlYXRlR2xvYmFsVmVyc2lvbiA9IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUdsb2JhbFZlcnNpb24oXG4gIHRoaXM6IE1vbmdvb3NlQWRhcHRlcixcbiAgeyBhdXRvc2F2ZSwgY3JlYXRlZEF0LCBnbG9iYWxTbHVnLCBwYXJlbnQsIHJlcSA9IHt9IGFzIFBheWxvYWRSZXF1ZXN0LCB1cGRhdGVkQXQsIHZlcnNpb25EYXRhIH0sXG4pIHtcbiAgY29uc3QgVmVyc2lvbk1vZGVsID0gdGhpcy52ZXJzaW9uc1tnbG9iYWxTbHVnXVxuICBjb25zdCBvcHRpb25zID0gYXdhaXQgd2l0aFNlc3Npb24odGhpcywgcmVxKVxuXG4gIGNvbnN0IFtkb2NdID0gYXdhaXQgVmVyc2lvbk1vZGVsLmNyZWF0ZShcbiAgICBbXG4gICAgICB7XG4gICAgICAgIGF1dG9zYXZlLFxuICAgICAgICBjcmVhdGVkQXQsXG4gICAgICAgIGxhdGVzdDogdHJ1ZSxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICB1cGRhdGVkQXQsXG4gICAgICAgIHZlcnNpb246IHZlcnNpb25EYXRhLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG9wdGlvbnMsXG4gICAgcmVxLFxuICApXG5cbiAgYXdhaXQgVmVyc2lvbk1vZGVsLnVwZGF0ZU1hbnkoXG4gICAge1xuICAgICAgJGFuZDogW1xuICAgICAgICB7XG4gICAgICAgICAgX2lkOiB7XG4gICAgICAgICAgICAkbmU6IGRvYy5faWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBhcmVudDoge1xuICAgICAgICAgICAgJGVxOiBwYXJlbnQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGxhdGVzdDoge1xuICAgICAgICAgICAgJGVxOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAgeyAkdW5zZXQ6IHsgbGF0ZXN0OiAxIH0gfSxcbiAgICBvcHRpb25zLFxuICApXG5cbiAgY29uc3QgcmVzdWx0ID0gdGhpcy5qc29uUGFyc2UgPyBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRvYykpIDogZG9jLnRvT2JqZWN0KClcblxuICBjb25zdCB2ZXJpZmljYXRpb25Ub2tlbiA9IGRvYy5fdmVyaWZpY2F0aW9uVG9rZW5cblxuICBpZiAodmVyaWZpY2F0aW9uVG9rZW4pIHtcbiAgICByZXN1bHQuX3ZlcmlmaWNhdGlvblRva2VuID0gdmVyaWZpY2F0aW9uVG9rZW5cbiAgfVxuICByZXR1cm4gc2FuaXRpemVJbnRlcm5hbEZpZWxkcyhyZXN1bHQpXG59XG4iXSwibmFtZXMiOlsiY3JlYXRlR2xvYmFsVmVyc2lvbiIsImF1dG9zYXZlIiwiY3JlYXRlZEF0IiwiZ2xvYmFsU2x1ZyIsInBhcmVudCIsInJlcSIsInVwZGF0ZWRBdCIsInZlcnNpb25EYXRhIiwiVmVyc2lvbk1vZGVsIiwidmVyc2lvbnMiLCJvcHRpb25zIiwid2l0aFNlc3Npb24iLCJkb2MiLCJjcmVhdGUiLCJsYXRlc3QiLCJ2ZXJzaW9uIiwidXBkYXRlTWFueSIsIiRhbmQiLCJfaWQiLCIkbmUiLCIkZXEiLCIkdW5zZXQiLCJyZXN1bHQiLCJqc29uUGFyc2UiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJ0b09iamVjdCIsInZlcmlmaWNhdGlvblRva2VuIiwiX3ZlcmlmaWNhdGlvblRva2VuIiwic2FuaXRpemVJbnRlcm5hbEZpZWxkcyJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFRYUE7OztlQUFBQTs7OytFQUhzQjs2QkFDUDs7Ozs7O0FBRXJCLE1BQU1BLHNCQUEyQyxlQUFlQSxvQkFFckUsRUFBRUMsUUFBUSxFQUFFQyxTQUFTLEVBQUVDLFVBQVUsRUFBRUMsTUFBTSxFQUFFQyxNQUFNLENBQUMsQ0FBbUIsRUFBRUMsU0FBUyxFQUFFQyxXQUFXLEVBQUU7SUFFL0YsTUFBTUMsZUFBZSxJQUFJLENBQUNDLFFBQVEsQ0FBQ04sV0FBVztJQUM5QyxNQUFNTyxVQUFVLE1BQU1DLElBQUFBLHdCQUFXLEVBQUMsSUFBSSxFQUFFTjtJQUV4QyxNQUFNLENBQUNPLElBQUksR0FBRyxNQUFNSixhQUFhSyxNQUFNLENBQ3JDO1FBQ0U7WUFDRVo7WUFDQUM7WUFDQVksUUFBUTtZQUNSVjtZQUNBRTtZQUNBUyxTQUFTUjtRQUNYO0tBQ0QsRUFDREcsU0FDQUw7SUFHRixNQUFNRyxhQUFhUSxVQUFVLENBQzNCO1FBQ0VDLE1BQU07WUFDSjtnQkFDRUMsS0FBSztvQkFDSEMsS0FBS1AsSUFBSU0sR0FBRztnQkFDZDtZQUNGO1lBQ0E7Z0JBQ0VkLFFBQVE7b0JBQ05nQixLQUFLaEI7Z0JBQ1A7WUFDRjtZQUNBO2dCQUNFVSxRQUFRO29CQUNOTSxLQUFLO2dCQUNQO1lBQ0Y7U0FDRDtJQUNILEdBQ0E7UUFBRUMsUUFBUTtZQUFFUCxRQUFRO1FBQUU7SUFBRSxHQUN4Qko7SUFHRixNQUFNWSxTQUFTLElBQUksQ0FBQ0MsU0FBUyxHQUFHQyxLQUFLQyxLQUFLLENBQUNELEtBQUtFLFNBQVMsQ0FBQ2QsUUFBUUEsSUFBSWUsUUFBUTtJQUU5RSxNQUFNQyxvQkFBb0JoQixJQUFJaUIsa0JBQWtCO0lBRWhELElBQUlELG1CQUFtQjtRQUNyQk4sT0FBT08sa0JBQWtCLEdBQUdEO0lBQzlCO0lBQ0EsT0FBT0UsSUFBQUEsK0JBQXNCLEVBQUNSO0FBQ2hDIn0=